{"version":3,"file":"inview-detection.modern.mjs","sources":["../src/index.js"],"sourcesContent":["/**\n * Written by Elliott Mangham at Code Resolution. Maintained by Code Resolution.\n * made@coderesolution.com\n */\nexport default class InviewDetection {\n\tconstructor(options = {}, gsap = null, ScrollTrigger = null) {\n\t\t// Set dependencies\n\t\tthis._gsap = gsap\n\t\tthis._ScrollTrigger = ScrollTrigger\n\n\t\t// Define default options\n\t\tthis.defaultOptions = {\n\t\t\telements: '[data-inview]',\n\t\t\tduration: 1,\n\t\t\tdelay: 0.1,\n\t\t\tstart: 'top 90%',\n\t\t\tease: 'power4',\n\t\t\tstagger: 0.08,\n\t\t\tanimationFrom: {\n\t\t\t\topacity: 0,\n\t\t\t\t'will-change': 'transform',\n\t\t\t\ty: 20,\n\t\t\t},\n\t\t\tanimationTo: {\n\t\t\t\topacity: 1,\n\t\t\t\ty: 0,\n\t\t\t},\n\t\t\tscreen: '(min-width: 1025px)',\n\t\t\tautoStart: true,\n\t\t\tinviewClass: 'is-inview',\n\t\t\tviewedClass: 'has-viewed',\n\t\t\tdebug: false,\n\t\t}\n\n\t\t// Merge default options with provided options\n\t\tthis.options = { ...this.defaultOptions, ...options }\n\n\t\t// Store ScrollTrigger instances\n\t\tthis.triggers = []\n\n\t\t// Store all animated elements\n\t\tthis.animatedElementsList = []\n\n\t\t// Store event listeners\n\t\tthis.eventListeners = {}\n\n\t\t// Start by default if set\n\t\tif (this.getOption('autoStart')) {\n\t\t\tthis.init()\n\t\t}\n\t}\n\n\t// Register GSAP and plugins\n\tregister(gsap, ScrollTrigger) {\n\t\tthis._gsap = gsap\n\t\tthis._ScrollTrigger = ScrollTrigger\n\t}\n\n\t// Function to get a specific option\n\tgetOption(optionName) {\n\t\treturn this.options[optionName]\n\t}\n\n\t// Initialisation function\n\tinit() {\n\t\t// Check if gsap is registered\n\t\tif (this._gsap === null || this._gsap === undefined) {\n\t\t\tconsole.log('GSAP is not registered. Exiting')\n\t\t\treturn\n\t\t}\n\n\t\t// Check if ScrollTrigger is registered\n\t\tif (this._ScrollTrigger === null || this._ScrollTrigger === undefined) {\n\t\t\tconsole.log('ScrollTrigger is not registered. Exiting')\n\t\t\treturn\n\t\t}\n\n\t\ttry {\n\t\t\t// Convert elements to an array and loop through each\n\t\t\tthis._gsap.utils.toArray(this.getOption('elements')).forEach((parent, index) => {\n\t\t\t\t// Define array to hold animated elements\n\t\t\t\tlet animatedElementsList = []\n\n\t\t\t\t// If the parent doesn't have 'data-inview-scope' attribute,\n\t\t\t\t// add it to the animated elements\n\t\t\t\t// Otherwise, add scoped and child elements\n\t\t\t\tif (!parent.hasAttribute('data-inview-scope')) {\n\t\t\t\t\tanimatedElementsList.push({ el: parent, order: parent.dataset.inviewOrder })\n\t\t\t\t} else {\n\t\t\t\t\tthis.addScopedElements(parent, animatedElementsList)\n\t\t\t\t\tthis.addChildElements(parent, animatedElementsList)\n\t\t\t\t}\n\n\t\t\t\t// Order the animated elements based on their 'order' property\n\t\t\t\tthis.sortAnimatedElements(animatedElementsList)\n\n\t\t\t\t// Animate the elements\n\t\t\t\tthis.animateElements(parent, animatedElementsList, index)\n\t\t\t})\n\t\t} catch (error) {\n\t\t\t// Catch and log any errors\n\t\t\tconsole.error('Error initialising InviewDetection:', error)\n\t\t}\n\t}\n\n\t// Function to register event listeners\n\ton(eventName, listener) {\n\t\tif (!this.eventListeners[eventName]) {\n\t\t\tthis.eventListeners[eventName] = []\n\t\t}\n\t\tthis.eventListeners[eventName].push(listener)\n\t}\n\n\t// Function to emit events\n\temit(eventName, element) {\n\t\tconst eventListeners = this.eventListeners[eventName]\n\t\tif (eventListeners) {\n\t\t\teventListeners.forEach((listener) => {\n\t\t\t\tlistener(element)\n\t\t\t})\n\t\t}\n\t}\n\n\t// Function to load and initialize the class\n\tstart() {\n\t\t// Initialize the class\n\t\tthis.init()\n\t}\n\n\t// Function to add scoped elements to the animatedElementsList array\n\taddScopedElements(parent, animatedElementsList) {\n\t\ttry {\n\t\t\t// If the parent has 'data-inview-scope' attribute,\n\t\t\t// add all elements defined in this attribute to the animatedElementsList array\n\t\t\tif (parent.dataset.inviewScope) {\n\t\t\t\tparent.querySelectorAll(':scope ' + parent.dataset.inviewScope).forEach((element) => {\n\t\t\t\t\tconst order = parseFloat(element.dataset.inviewOrder)\n\t\t\t\t\tanimatedElementsList.push({ el: element, order: order })\n\t\t\t\t\tthis.animatedElementsList.push(element)\n\t\t\t\t})\n\t\t\t}\n\t\t} catch (error) {\n\t\t\t// Catch and log any errors\n\t\t\tconsole.error('Error adding scoped elements:', error)\n\t\t}\n\t}\n\n\t// Function to add child elements to the animatedElementsList array\n\taddChildElements(parent, animatedElementsList) {\n\t\ttry {\n\t\t\t// Add all elements with 'data-inview-child' attribute to the animatedElementsList array\n\t\t\tparent.querySelectorAll(':scope [data-inview-child]').forEach((element) => {\n\t\t\t\tconst order = parseFloat(element.dataset.inviewOrder)\n\t\t\t\tanimatedElementsList.push({ el: element, order: order })\n\t\t\t\tthis.animatedElementsList.push(element)\n\t\t\t})\n\t\t} catch (error) {\n\t\t\t// Catch and log any errors\n\t\t\tconsole.error('Error adding child elements:', error)\n\t\t}\n\t}\n\n\t// Function to find the closest parent with 'data-inview-order' attribute\n\tfindClosestParentOrderAttr(element) {\n\t\tlet parent = element.parentElement\n\t\tlet ancestorsIndexed = 0\n\t\tlet ancestorsLimit = 5\n\n\t\t// Iterate through parent elements up to ancestorsLimit\n\t\twhile (parent && ancestorsIndexed <= ancestorsLimit) {\n\t\t\tif (parent.hasAttribute('data-inview-order')) {\n\t\t\t\treturn parseFloat(parent.getAttribute('data-inview-order'))\n\t\t\t}\n\t\t\tparent = parent.parentElement\n\t\t\tancestorsIndexed++\n\t\t}\n\n\t\tif (element.hasAttribute('data-inview-order')) {\n\t\t\tconst value = element.getAttribute('data-inview-order')\n\t\t\treturn isNaN(+value) ? false : +value\n\t\t}\n\n\t\treturn false\n\t}\n\n\t// Function to order animated elements based on their 'order' property\n\tsortAnimatedElements(animatedElementsList) {\n\t\tanimatedElementsList.sort((a, b) => {\n\t\t\treturn (a['order'] ?? 1) - (b['order'] ?? -1)\n\t\t})\n\n\t\t// Replace each animatedElement object with its corresponding element\n\t\tfor (let i = 0; i < animatedElementsList.length; i++) {\n\t\t\tanimatedElementsList[i] = animatedElementsList[i].el\n\t\t}\n\t}\n\n\t// Function to animate the elements\n\tanimateElements(parent, animatedElementsList, index) {\n\t\t// Initialise animation property arrays\n\t\tlet animationFromPropertiesArray = []\n\t\tlet animationToPropertiesArray = []\n\n\t\t// Create a matchMedia instance\n\t\tconst matchMedia = this._gsap.matchMedia()\n\n\t\t// Get the screen media query\n\t\tconst screen = parent.dataset.inviewScreen || this.getOption('screen')\n\n\t\t// Initialise a new gsap timeline\n\t\tmatchMedia.add(screen, () => {\n\t\t\tlet timeline = this._gsap.timeline({\n\t\t\t\tscrollTrigger: {\n\t\t\t\t\ttrigger: parent,\n\t\t\t\t\tstart: parent.dataset.inviewStart || this.getOption('start'),\n\t\t\t\t\tinvalidateOnRefresh: true,\n\t\t\t\t\tonEnter: async () => {\n\t\t\t\t\t\ttimeline.play()\n\t\t\t\t\t\ttimeline.hasPlayed = true\n\n\t\t\t\t\t\tparent.classList.add(this.getOption('viewedClass'))\n\n\t\t\t\t\t\t// Check if the parent has the 'data-inview-call' attribute and, if so, dispatch a custom event with the attribute's value as the event name\n\t\t\t\t\t\tif (parent.hasAttribute('data-inview-call')) {\n\t\t\t\t\t\t\tconst customEventName = parent.getAttribute('data-inview-call')\n\t\t\t\t\t\t\twindow.dispatchEvent(\n\t\t\t\t\t\t\t\tnew CustomEvent(customEventName, {\n\t\t\t\t\t\t\t\t\tdetail: {\n\t\t\t\t\t\t\t\t\t\ttarget: parent,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (this.eventListeners['onEnter']) {\n\t\t\t\t\t\t\tthis.emit('onEnter', parent)\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tonLeave: () => {\n\t\t\t\t\t\tif (parent.hasAttribute('data-inview-repeat')) {\n\t\t\t\t\t\t\ttimeline.restart().pause()\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (this.eventListeners['onLeave']) {\n\t\t\t\t\t\t\tthis.emit('onLeave', parent)\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tonEnterBack: async () => {\n\t\t\t\t\t\tif (parent.hasAttribute('data-inview-repeat')) {\n\t\t\t\t\t\t\ttimeline.restart()\n\t\t\t\t\t\t\ttimeline.hasPlayed = true\n\t\t\t\t\t\t} else if (!timeline.hasPlayed) {\n\t\t\t\t\t\t\ttimeline.play()\n\t\t\t\t\t\t\ttimeline.hasPlayed = true\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (this.eventListeners['onEnterBack']) {\n\t\t\t\t\t\t\tthis.emit('onEnterBack', parent)\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tonLeaveBack: () => {\n\t\t\t\t\t\tif (parent.hasAttribute('data-inview-repeat')) {\n\t\t\t\t\t\t\ttimeline.restart().pause()\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (this.eventListeners['onLeaveBack']) {\n\t\t\t\t\t\t\tthis.emit('onLeaveBack', parent)\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tmarkers: this.getOption('debug') || parent.hasAttribute('data-inview-debug') ? true : false, // Modified line to include global debug option\n\t\t\t\t\ttoggleClass: {\n\t\t\t\t\t\ttargets: parent,\n\t\t\t\t\t\tclassName: this.getOption('inviewClass'),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t})\n\n\t\t\ttimeline.hasPlayed = false\n\n\t\t\t// Initialise a variable to hold the current time position on the timeline\n\t\t\tlet currentTime = 0\n\n\t\t\tanimatedElementsList.forEach((element) => {\n\t\t\t\ttry {\n\t\t\t\t\tlet animationFromProperties = this.getOption('animationFrom')\n\t\t\t\t\tlet animationToProperties = this.getOption('animationTo')\n\n\t\t\t\t\t// Check if the element has custom animation properties defined in 'data-inview-from' and 'data-inview-to'\n\t\t\t\t\tif (element.dataset.inviewFrom) {\n\t\t\t\t\t\tanimationFromProperties = JSON.parse(element.dataset.inviewFrom)\n\t\t\t\t\t} else if (parent.dataset.inviewFrom) {\n\t\t\t\t\t\tanimationFromProperties = JSON.parse(parent.dataset.inviewFrom)\n\t\t\t\t\t}\n\n\t\t\t\t\tif (element.dataset.inviewTo) {\n\t\t\t\t\t\tanimationToProperties = JSON.parse(element.dataset.inviewTo)\n\t\t\t\t\t} else if (parent.dataset.inviewTo) {\n\t\t\t\t\t\tanimationToProperties = JSON.parse(parent.dataset.inviewTo)\n\t\t\t\t\t}\n\n\t\t\t\t\t// Push the properties for this element to the arrays\n\t\t\t\t\tanimationFromPropertiesArray.push(animationFromProperties)\n\t\t\t\t\tanimationToPropertiesArray.push(animationToProperties)\n\n\t\t\t\t\t// Set initial animation properties for the animated elements\n\t\t\t\t\tthis._gsap.set(element, animationFromProperties)\n\n\t\t\t\t\t// Get the stagger time\n\t\t\t\t\tlet staggerTime = parent.dataset.inviewStagger || this.getOption('stagger')\n\n\t\t\t\t\t// Add the animation to the timeline\n\t\t\t\t\ttimeline.to(\n\t\t\t\t\t\telement,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t...animationToProperties,\n\t\t\t\t\t\t\tduration: parent.dataset.inviewDuration || this.getOption('duration'),\n\t\t\t\t\t\t\tdelay: parent.dataset.inviewDelay || this.getOption('delay'),\n\t\t\t\t\t\t\tease: parent.dataset.inviewEase || this.getOption('ease'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tcurrentTime\n\t\t\t\t\t)\n\n\t\t\t\t\t// Increase the current time position by the stagger time for the next animation\n\t\t\t\t\tcurrentTime += parseFloat(staggerTime)\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconsole.error(`An error occurred while animating the element: ${e}`)\n\t\t\t\t}\n\t\t\t})\n\n\t\t\t// Pause the timeline initially, the onEnter/onEnterBack events will play/restart it\n\t\t\ttimeline.pause()\n\t\t})\n\n\t\t// Debug mode\n\t\tif (this.getOption('debug') || parent.hasAttribute('data-inview-debug')) {\n\t\t\tthis.debugMode(\n\t\t\t\tparent,\n\t\t\t\tanimatedElementsList,\n\t\t\t\tanimationFromPropertiesArray,\n\t\t\t\tanimationToPropertiesArray,\n\t\t\t\tindex\n\t\t\t)\n\t\t}\n\t}\n\n\t// Function for debug mode logging\n\tdebugMode(parent, animatedElementsList, animationFromProperties, animationToProperties, index) {\n\t\tconsole.group(`InviewDetection() debug instance (#${index + 1})`)\n\t\tconsole.log({\n\t\t\tparent: parent,\n\t\t\telements: animatedElementsList,\n\t\t\tscreen: this.getOption('screen'),\n\t\t\tanimationFrom: animationFromProperties,\n\t\t\tanimationTo: animationToProperties,\n\t\t\tduration: this.getOption('duration'),\n\t\t\tdelay: this.getOption('delay'),\n\t\t\tstart: this.getOption('start'),\n\t\t\tease: this.getOption('ease'),\n\t\t\tstagger: this.getOption('stagger'),\n\t\t})\n\t\tconsole.groupEnd()\n\t}\n\n\t// Function to refresh ScrollTrigger instances\n\trefresh() {\n\t\tthis._ScrollTrigger.refresh()\n\n\t\tif (this.eventListeners['refresh']) {\n\t\t\tthis.emit('refresh', parent)\n\t\t}\n\t}\n\n\t// Function to stop the animations and ScrollTrigger instances\n\tstop() {\n\t\t// Kill ScrollTrigger instances created in this script\n\t\tthis.triggers.forEach((st) => st.kill())\n\n\t\t// Kill all animations\n\t\tconst allElements = this._gsap.utils.toArray(this.getOption('elements')).concat(this.animatedElementsList)\n\n\t\tallElements.forEach((element) => {\n\t\t\tthis._gsap.killTweensOf(element)\n\t\t})\n\n\t\tif (this.eventListeners['stop']) {\n\t\t\tthis.emit('stop', parent)\n\t\t}\n\t}\n\n\t// Function to restart the animations and reinitialise everything\n\trestart() {\n\t\t// Kill all GSAP animations of the elements\n\t\tthis._gsap.utils.toArray(this.getOption('elements')).forEach((element) => {\n\t\t\tthis._gsap.killTweensOf(element)\n\t\t})\n\n\t\t// Reinitialise everything\n\t\tthis.init()\n\n\t\tif (this.eventListeners['restart']) {\n\t\t\tthis.emit('restart', parent)\n\t\t}\n\t}\n}\n"],"names":["InviewDetection","constructor","options","gsap","ScrollTrigger","this","_gsap","_ScrollTrigger","defaultOptions","elements","duration","delay","start","ease","stagger","animationFrom","opacity","y","animationTo","screen","autoStart","inviewClass","viewedClass","debug","_extends","triggers","animatedElementsList","eventListeners","getOption","init","register","optionName","utils","toArray","forEach","parent","index","hasAttribute","addScopedElements","addChildElements","push","el","order","dataset","inviewOrder","sortAnimatedElements","animateElements","error","console","log","on","eventName","listener","emit","element","inviewScope","querySelectorAll","parseFloat","findClosestParentOrderAttr","parentElement","ancestorsIndexed","getAttribute","value","isNaN","sort","a","b","_a$order","_b$order","i","length","_this","animationFromPropertiesArray","animationToPropertiesArray","matchMedia","inviewScreen","add","timeline","scrollTrigger","trigger","inviewStart","invalidateOnRefresh","onEnter","async","play","hasPlayed","classList","customEventName","window","dispatchEvent","CustomEvent","detail","target","onLeave","restart","pause","onEnterBack","onLeaveBack","markers","toggleClass","targets","className","currentTime","animationFromProperties","animationToProperties","inviewFrom","JSON","parse","inviewTo","set","staggerTime","inviewStagger","to","inviewDuration","inviewDelay","inviewEase","e","debugMode","group","groupEnd","refresh","stop","st","kill","concat","killTweensOf"],"mappings":"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"}