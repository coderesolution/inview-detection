{"version":3,"file":"inview-detection.modern.mjs","sources":["../src/index.js"],"sourcesContent":["/**\n * Written by Elliott Mangham at Code Resolution.\n * Maintained by Code Resolution.\n * made@coderesolution.com\n */\nexport default class InviewDetection {\n\tconstructor(options = {}, gsap = null, ScrollTrigger = null, SplitText = null) {\n\t\t// Set dependencies\n\t\tthis._gsap = gsap\n\t\tthis._ScrollTrigger = ScrollTrigger\n\t\tthis._SplitText = SplitText\n\n\t\t// Define default options\n\t\tthis.defaultOptions = {\n\t\t\telements: '[data-inview]',\n\t\t\tduration: 1,\n\t\t\tdelay: 0.1,\n\t\t\tstart: 'top 90%',\n\t\t\tease: 'power4',\n\t\t\tstagger: 0.08,\n\t\t\tanimationFrom: {\n\t\t\t\topacity: 0,\n\t\t\t\t'will-change': 'transform',\n\t\t\t\ty: 20,\n\t\t\t},\n\t\t\tanimationTo: {\n\t\t\t\topacity: 1,\n\t\t\t\ty: 0,\n\t\t\t},\n\t\t\tscreen: '(min-width: 1025px)',\n\t\t\tautoStart: true,\n\t\t\tinviewClass: 'is-inview',\n\t\t\tviewedClass: 'has-viewed',\n\t\t}\n\n\t\t// Merge default options with provided options\n\t\tthis.options = { ...this.defaultOptions, ...options }\n\n\t\t// Store ScrollTrigger instances\n\t\tthis.triggers = []\n\n\t\t// Store all animated elements\n\t\tthis.animatedElementsList = []\n\n\t\t// Store event listeners\n\t\tthis.eventListeners = {}\n\n\t\t// Start by default if set\n\t\tif (this.getOption('autoStart')) {\n\t\t\tthis.init()\n\t\t}\n\t}\n\n\t// Register GSAP and plugins\n\tregister(gsap, ScrollTrigger, SplitText) {\n\t\tthis._gsap = gsap\n\t\tthis._ScrollTrigger = ScrollTrigger\n\t\tthis._SplitText = SplitText\n\t}\n\n\t// Function to get a specific option\n\tgetOption(optionName) {\n\t\treturn this.options[optionName]\n\t}\n\n\t// Initialisation function\n\tinit() {\n\t\t// Check if gsap is registered\n\t\tif (this._gsap === null || this._gsap === undefined) {\n\t\t\tconsole.log('GSAP is not registered. Exiting')\n\t\t\treturn\n\t\t}\n\n\t\t// Check if ScrollTrigger is registered\n\t\tif (this._ScrollTrigger === null || this._ScrollTrigger === undefined) {\n\t\t\tconsole.log('ScrollTrigger is not registered. Exiting')\n\t\t\treturn\n\t\t}\n\n\t\t// Check if SplitText is registered\n\t\tif (this._SplitText === null || this._SplitText === undefined) {\n\t\t\tconsole.log('SplitText is not registered. data-inview-split is disabled.')\n\t\t}\n\n\t\ttry {\n\t\t\t// Convert elements to an array and loop through each\n\t\t\tthis._gsap.utils.toArray(this.getOption('elements')).forEach((parent, index) => {\n\t\t\t\t// Define array to hold animated elements\n\t\t\t\tlet animatedElementsList = []\n\n\t\t\t\t// If the parent doesn't have 'data-inview-scope' attribute,\n\t\t\t\t// add it to the animated elements\n\t\t\t\t// Otherwise, add scoped, child, and split elements\n\t\t\t\tif (!parent.hasAttribute('data-inview-scope')) {\n\t\t\t\t\tanimatedElementsList.push({ el: parent, order: parent.dataset.inviewOrder })\n\t\t\t\t} else {\n\t\t\t\t\tthis.addScopedElements(parent, animatedElementsList)\n\t\t\t\t\tthis.addChildElements(parent, animatedElementsList)\n\t\t\t\t\tthis.addSplitElements(parent, animatedElementsList)\n\t\t\t\t}\n\n\t\t\t\t// Order the animated elements based on their 'order' property\n\t\t\t\tthis.sortAnimatedElements(animatedElementsList)\n\n\t\t\t\t// Animate the elements\n\t\t\t\tthis.animateElements(parent, animatedElementsList, index)\n\t\t\t})\n\t\t} catch (error) {\n\t\t\t// Catch and log any errors\n\t\t\tconsole.error('Error initialising InviewDetection:', error)\n\t\t}\n\t}\n\n\t// Function to register event listeners\n\ton(eventName, listener) {\n\t\tif (!this.eventListeners[eventName]) {\n\t\t\tthis.eventListeners[eventName] = []\n\t\t}\n\t\tthis.eventListeners[eventName].push(listener)\n\t}\n\n\t// Function to emit events\n\temit(eventName, element) {\n\t\tconst eventListeners = this.eventListeners[eventName]\n\t\tif (eventListeners) {\n\t\t\teventListeners.forEach((listener) => {\n\t\t\t\tlistener(element)\n\t\t\t})\n\t\t}\n\t}\n\n\t// Function to load and initialize the class\n\tstart() {\n\t\t// Initialize the class\n\t\tthis.init()\n\t}\n\n\t// Function to add scoped elements to the animatedElementsList array\n\taddScopedElements(parent, animatedElementsList) {\n\t\ttry {\n\t\t\t// If the parent has 'data-inview-scope' attribute,\n\t\t\t// add all elements defined in this attribute to the animatedElementsList array\n\t\t\tif (parent.dataset.inviewScope) {\n\t\t\t\tparent.querySelectorAll(':scope ' + parent.dataset.inviewScope).forEach((element) => {\n\t\t\t\t\tconst order = parseFloat(element.dataset.inviewOrder)\n\t\t\t\t\tanimatedElementsList.push({ el: element, order: order })\n\t\t\t\t\tthis.animatedElementsList.push(element)\n\t\t\t\t})\n\t\t\t}\n\t\t} catch (error) {\n\t\t\t// Catch and log any errors\n\t\t\tconsole.error('Error adding scoped elements:', error)\n\t\t}\n\t}\n\n\t// Function to add child elements to the animatedElementsList array\n\taddChildElements(parent, animatedElementsList) {\n\t\ttry {\n\t\t\t// Add all elements with 'data-inview-child' attribute to the animatedElementsList array\n\t\t\tparent.querySelectorAll(':scope [data-inview-child]').forEach((element) => {\n\t\t\t\tconst order = parseFloat(element.dataset.inviewOrder)\n\t\t\t\tanimatedElementsList.push({ el: element, order: order })\n\t\t\t\tthis.animatedElementsList.push(element)\n\t\t\t})\n\t\t} catch (error) {\n\t\t\t// Catch and log any errors\n\t\t\tconsole.error('Error adding child elements:', error)\n\t\t}\n\t}\n\n\t// Function to find the closest parent with 'data-inview-order' attribute\n\tfindClosestParentOrderAttr(element) {\n\t\tlet parent = element.parentElement\n\t\tlet ancestorsIndexed = 0\n\t\tlet ancestorsLimit = 5\n\t\t// Iterate through parent elements up to ancestorsLimit\n\t\twhile (parent && ancestorsIndexed <= ancestorsLimit) {\n\t\t\tif (parent.hasAttribute('data-inview-order')) {\n\t\t\t\treturn parseFloat(parent.getAttribute('data-inview-order'))\n\t\t\t}\n\t\t\tparent = parent.parentElement\n\t\t\tancestorsIndexed++\n\t\t}\n\t\tif (element.hasAttribute('data-inview-order')) {\n\t\t\tconst value = element.getAttribute('data-inview-order')\n\t\t\treturn isNaN(+value) ? false : +value\n\t\t}\n\t\treturn false\n\t}\n\n\t// Function to add split elements to the animatedElementsList array\n\taddSplitElements(parent, animatedElementsList) {\n\t\tconst splitElements = parent.querySelectorAll(':scope *:where([data-inview-split])')\n\t\tconst splitElementsParent = Array.from(splitElements).filter((element) => element.dataset.inviewSplit)\n\t\tconst selfToSplit = Array.from(splitElements).filter((element) => !element.dataset.inviewSplit)\n\n\t\tlet elementsToSplit = [...selfToSplit, ...this.getSplitChildren(splitElementsParent)]\n\n\t\t// For each element to split, add it to the animatedElementsList array\n\t\telementsToSplit.forEach((splitElement) => {\n\t\t\t// If splitElement is a NodeList, handle each Node individually\n\t\t\tif (splitElement instanceof NodeList) {\n\t\t\t\tsplitElement.forEach((node) => this.addSplitElement(node, animatedElementsList))\n\t\t\t} else {\n\t\t\t\tthis.addSplitElement(splitElement, animatedElementsList)\n\t\t\t}\n\t\t})\n\t}\n\n\t// Function to get split children\n\tgetSplitChildren(splitElementsParent) {\n\t\tlet splitChildren = []\n\n\t\t// For each split parent, add its children to splitChildren array\n\t\tsplitElementsParent.forEach((splitParent) => {\n\t\t\tsplitChildren = [\n\t\t\t\t...splitChildren,\n\t\t\t\t...splitParent.querySelectorAll(':scope ' + splitParent.dataset.inviewSplit),\n\t\t\t]\n\t\t})\n\n\t\treturn splitChildren\n\t}\n\n\t// Function to add a split element to the animatedElementsList array\n\taddSplitElement(splitElement, animatedElementsList) {\n\t\tif (this._SplitText) {\n\t\t\ttry {\n\t\t\t\t// Check if splitElement is a DOM element\n\t\t\t\tif (splitElement instanceof Element) {\n\t\t\t\t\t// Find the closest parent with 'data-inview-order' attribute\n\t\t\t\t\tlet order = this.findClosestParentOrderAttr(splitElement)\n\n\t\t\t\t\t// Split the text of the splitElement into lines\n\t\t\t\t\tconst splitChildren = new this._SplitText(splitElement, {\n\t\t\t\t\t\ttype: 'lines',\n\t\t\t\t\t\tlinesClass: 'lineChild',\n\t\t\t\t\t})\n\n\t\t\t\t\t// For each line, add it to the animatedElementsList array\n\t\t\t\t\tsplitChildren.lines.forEach((line) => {\n\t\t\t\t\t\tif (order) {\n\t\t\t\t\t\t\torder += 0.01\n\t\t\t\t\t\t\tline.dataset.inviewOrder = order.toFixed(2)\n\t\t\t\t\t\t\tanimatedElementsList.push({\n\t\t\t\t\t\t\t\tel: line,\n\t\t\t\t\t\t\t\torder: order,\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\tthis.animatedElementsList.push(line)\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tanimatedElementsList.push({\n\t\t\t\t\t\t\t\tel: line,\n\t\t\t\t\t\t\t\torder: false,\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\tthis.animatedElementsList.push(line)\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Set visibility to visible\n\t\t\t\t\t\tline.style.visibility = 'visible'\n\t\t\t\t\t})\n\t\t\t\t} else {\n\t\t\t\t\t// Log an error if splitElement is not a DOM element\n\t\t\t\t\tconsole.error('splitElement is not a DOM element:', splitElement)\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\t// Catch and log any errors\n\t\t\t\tconsole.error('Error splitting element:', error)\n\t\t\t}\n\t\t}\n\t}\n\n\t// Function to order animated elements based on their 'order' property\n\tsortAnimatedElements(animatedElementsList) {\n\t\tanimatedElementsList.sort((a, b) => {\n\t\t\treturn (a['order'] ?? 1) - (b['order'] ?? -1)\n\t\t})\n\n\t\t// Replace each animatedElement object with its corresponding element\n\t\tfor (let i = 0; i < animatedElementsList.length; i++) {\n\t\t\tanimatedElementsList[i] = animatedElementsList[i].el\n\t\t}\n\t}\n\n\t// Function to animate the elements\n\tanimateElements(parent, animatedElementsList, index) {\n\t\t// Initialise animation property arrays\n\t\tlet animationFromPropertiesArray = []\n\t\tlet animationToPropertiesArray = []\n\n\t\t// Create a matchMedia instance\n\t\tconst matchMedia = this._gsap.matchMedia()\n\n\t\t// Get the screen media query\n\t\tconst screen = parent.dataset.inviewScreen || this.getOption('screen')\n\n\t\t// Initialise a new gsap timeline\n\t\tmatchMedia.add(screen, () => {\n\t\t\tlet timeline = this._gsap.timeline({\n\t\t\t\tscrollTrigger: {\n\t\t\t\t\ttrigger: parent,\n\t\t\t\t\tstart: parent.dataset.inviewStart || this.getOption('start'),\n\t\t\t\t\tinvalidateOnRefresh: true,\n\t\t\t\t\tonEnter: async () => {\n\t\t\t\t\t\ttimeline.play()\n\t\t\t\t\t\ttimeline.hasPlayed = true\n\n\t\t\t\t\t\tparent.classList.add(this.getOption('viewedClass'))\n\n\t\t\t\t\t\t// Check if the parent has the 'data-inview-call' attribute and, if so, dispatch a custom event with the attribute's value as the event name\n\t\t\t\t\t\tif (parent.hasAttribute('data-inview-call')) {\n\t\t\t\t\t\t\tconst customEventName = parent.getAttribute('data-inview-call')\n\t\t\t\t\t\t\twindow.dispatchEvent(\n\t\t\t\t\t\t\t\tnew CustomEvent(customEventName, {\n\t\t\t\t\t\t\t\t\tdetail: {\n\t\t\t\t\t\t\t\t\t\ttarget: parent,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (this.eventListeners['onEnter']) {\n\t\t\t\t\t\t\tthis.emit('onEnter', parent)\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tonLeave: () => {\n\t\t\t\t\t\tif (parent.hasAttribute('data-inview-repeat')) {\n\t\t\t\t\t\t\ttimeline.restart().pause()\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (this.eventListeners['onLeave']) {\n\t\t\t\t\t\t\tthis.emit('onLeave', parent)\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tonEnterBack: async () => {\n\t\t\t\t\t\tif (parent.hasAttribute('data-inview-repeat')) {\n\t\t\t\t\t\t\ttimeline.restart()\n\t\t\t\t\t\t\ttimeline.hasPlayed = true\n\t\t\t\t\t\t} else if (!timeline.hasPlayed) {\n\t\t\t\t\t\t\ttimeline.play()\n\t\t\t\t\t\t\ttimeline.hasPlayed = true\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (this.eventListeners['onEnterBack']) {\n\t\t\t\t\t\t\tthis.emit('onEnterBack', parent)\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tonLeaveBack: () => {\n\t\t\t\t\t\tif (parent.hasAttribute('data-inview-repeat')) {\n\t\t\t\t\t\t\ttimeline.restart().pause()\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (this.eventListeners['onLeaveBack']) {\n\t\t\t\t\t\t\tthis.emit('onLeaveBack', parent)\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tmarkers: parent.hasAttribute('data-inview-debug') ? true : false,\n\t\t\t\t\ttoggleClass: {\n\t\t\t\t\t\ttargets: parent,\n\t\t\t\t\t\tclassName: this.getOption('inviewClass'),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t})\n\n\t\t\ttimeline.hasPlayed = false\n\n\t\t\t// Initialise a variable to hold the current time position on the timeline\n\t\t\tlet currentTime = 0\n\n\t\t\tanimatedElementsList.forEach((element) => {\n\t\t\t\ttry {\n\t\t\t\t\tlet animationFromProperties = this.getOption('animationFrom')\n\t\t\t\t\tlet animationToProperties = this.getOption('animationTo')\n\n\t\t\t\t\t// Check if the element has custom animation properties defined in 'data-inview-from' and 'data-inview-to'\n\t\t\t\t\tif (element.dataset.inviewFrom) {\n\t\t\t\t\t\tanimationFromProperties = JSON.parse(element.dataset.inviewFrom)\n\t\t\t\t\t} else if (parent.dataset.inviewFrom) {\n\t\t\t\t\t\tanimationFromProperties = JSON.parse(parent.dataset.inviewFrom)\n\t\t\t\t\t}\n\n\t\t\t\t\tif (element.dataset.inviewTo) {\n\t\t\t\t\t\tanimationToProperties = JSON.parse(element.dataset.inviewTo)\n\t\t\t\t\t} else if (parent.dataset.inviewTo) {\n\t\t\t\t\t\tanimationToProperties = JSON.parse(parent.dataset.inviewTo)\n\t\t\t\t\t}\n\n\t\t\t\t\t// Push the properties for this element to the arrays\n\t\t\t\t\tanimationFromPropertiesArray.push(animationFromProperties)\n\t\t\t\t\tanimationToPropertiesArray.push(animationToProperties)\n\n\t\t\t\t\t// Set initial animation properties for the animated elements\n\t\t\t\t\tthis._gsap.set(element, animationFromProperties)\n\n\t\t\t\t\t// Get the stagger time\n\t\t\t\t\tlet staggerTime = parent.dataset.inviewStagger || this.getOption('stagger')\n\n\t\t\t\t\t// Add the animation to the timeline\n\t\t\t\t\ttimeline.to(\n\t\t\t\t\t\telement,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t...animationToProperties,\n\t\t\t\t\t\t\tduration: parent.dataset.inviewDuration || this.getOption('duration'),\n\t\t\t\t\t\t\tdelay: parent.dataset.inviewDelay || this.getOption('delay'),\n\t\t\t\t\t\t\tease: parent.dataset.inviewEase || this.getOption('ease'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tcurrentTime\n\t\t\t\t\t)\n\n\t\t\t\t\t// Increase the current time position by the stagger time for the next animation\n\t\t\t\t\tcurrentTime += parseFloat(staggerTime)\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconsole.error(`An error occurred while animating the element: ${e}`)\n\t\t\t\t}\n\t\t\t})\n\n\t\t\t// Pause the timeline initially, the onEnter/onEnterBack events will play/restart it\n\t\t\ttimeline.pause()\n\t\t})\n\n\t\t// Debug mode\n\t\tif (parent.hasAttribute('data-inview-debug')) {\n\t\t\tthis.debugMode(\n\t\t\t\tparent,\n\t\t\t\tanimatedElementsList,\n\t\t\t\tanimationFromPropertiesArray,\n\t\t\t\tanimationToPropertiesArray,\n\t\t\t\tindex\n\t\t\t)\n\t\t}\n\t}\n\n\t// Function for debug mode logging\n\tdebugMode(parent, animatedElementsList, animationFromProperties, animationToProperties, index) {\n\t\tconsole.group(`InviewDetection() debug instance (#${index + 1})`)\n\t\tconsole.log({\n\t\t\tparent: parent,\n\t\t\telements: animatedElementsList,\n\t\t\tscreen: this.getOption('screen'),\n\t\t\tanimationFrom: animationFromProperties,\n\t\t\tanimationTo: animationToProperties,\n\t\t\tduration: this.getOption('duration'),\n\t\t\tdelay: this.getOption('delay'),\n\t\t\tstart: this.getOption('start'),\n\t\t\tease: this.getOption('ease'),\n\t\t\tstagger: this.getOption('stagger'),\n\t\t})\n\t\tconsole.groupEnd()\n\t}\n\n\t// Function to refresh ScrollTrigger instances\n\trefresh() {\n\t\tthis._ScrollTrigger.refresh()\n\n\t\tif (this.eventListeners['refresh']) {\n\t\t\tthis.emit('refresh', parent)\n\t\t}\n\t}\n\n\t// Function to stop the animations and ScrollTrigger instances\n\tstop() {\n\t\t// Kill ScrollTrigger instances created in this script\n\t\tthis.triggers.forEach((st) => st.kill())\n\n\t\t// Kill all animations\n\t\tconst allElements = this._gsap.utils.toArray(this.getOption('elements')).concat(this.animatedElementsList)\n\n\t\tallElements.forEach((element) => {\n\t\t\tthis._gsap.killTweensOf(element)\n\t\t})\n\n\t\tif (this.eventListeners['stop']) {\n\t\t\tthis.emit('stop', parent)\n\t\t}\n\t}\n\n\t// Function to restart the animations and reinitialise everything\n\trestart() {\n\t\t// Kill all GSAP animations of the elements\n\t\tthis._gsap.utils.toArray(this.getOption('elements')).forEach((element) => {\n\t\t\tthis._gsap.killTweensOf(element)\n\t\t})\n\n\t\t// Reinitialise everything\n\t\tthis.init()\n\n\t\tif (this.eventListeners['restart']) {\n\t\t\tthis.emit('restart', parent)\n\t\t}\n\t}\n}\n"],"names":["InviewDetection","constructor","options","gsap","ScrollTrigger","SplitText","this","_gsap","_ScrollTrigger","_SplitText","defaultOptions","elements","duration","delay","start","ease","stagger","animationFrom","opacity","y","animationTo","screen","autoStart","inviewClass","viewedClass","_extends","triggers","animatedElementsList","eventListeners","getOption","init","register","optionName","console","log","utils","toArray","forEach","parent","index","hasAttribute","addScopedElements","addChildElements","addSplitElements","push","el","order","dataset","inviewOrder","sortAnimatedElements","animateElements","error","on","eventName","listener","emit","element","inviewScope","querySelectorAll","parseFloat","findClosestParentOrderAttr","parentElement","ancestorsIndexed","getAttribute","value","isNaN","splitElements","splitElementsParent","Array","from","filter","inviewSplit","getSplitChildren","splitElement","NodeList","node","addSplitElement","splitChildren","splitParent","Element","type","linesClass","lines","line","toFixed","style","visibility","sort","a","b","_a$order","_b$order","i","length","_this","animationFromPropertiesArray","animationToPropertiesArray","matchMedia","inviewScreen","add","timeline","scrollTrigger","trigger","inviewStart","invalidateOnRefresh","onEnter","async","play","hasPlayed","classList","customEventName","window","dispatchEvent","CustomEvent","detail","target","onLeave","restart","pause","onEnterBack","onLeaveBack","markers","toggleClass","targets","className","currentTime","animationFromProperties","animationToProperties","inviewFrom","JSON","parse","inviewTo","set","staggerTime","inviewStagger","to","inviewDuration","inviewDelay","inviewEase","e","debugMode","group","groupEnd","refresh","stop","st","kill","concat","killTweensOf"],"mappings":"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"}