{"version":3,"file":"inview-detection.js","sources":["../src/index.js"],"sourcesContent":["/**\n * Written by Elliott Mangham at Code Resolution.\n * Maintained by Code Resolution.\n * made@coderesolution.com\n */\nexport default class InviewDetection {\n\tconstructor(options = {}, gsap = null, ScrollTrigger = null, SplitText = null) {\n\t\t// Set dependencies\n\t\tthis._gsap = gsap\n\t\tthis._ScrollTrigger = ScrollTrigger\n\t\tthis._SplitText = SplitText\n\n\t\t// Define default options\n\t\tthis.defaultOptions = {\n\t\t\telements: '[data-inview]',\n\t\t\tduration: 1,\n\t\t\tdelay: 0.1,\n\t\t\tstart: 'top 90%',\n\t\t\tease: 'power4',\n\t\t\tstagger: 0.08,\n\t\t\tanimationFrom: {\n\t\t\t\topacity: 0,\n\t\t\t\t'will-change': 'transform',\n\t\t\t\ty: 20,\n\t\t\t},\n\t\t\tanimationTo: {\n\t\t\t\topacity: 1,\n\t\t\t\ty: 0,\n\t\t\t},\n\t\t\tscreen: '(min-width: 1025px)',\n\t\t\tautoStart: true,\n\t\t\tinviewClass: 'is-inview',\n\t\t\tviewedClass: 'has-viewed',\n\t\t}\n\n\t\t// Merge default options with provided options\n\t\tthis.options = { ...this.defaultOptions, ...options }\n\n\t\t// Store ScrollTrigger instances\n\t\tthis.triggers = []\n\n\t\t// Store all animated elements\n\t\tthis.animatedElementsList = []\n\n\t\t// Store event listeners\n\t\tthis.eventListeners = {}\n\n\t\t// Start by default if set\n\t\tif (this.getOption('autoStart')) {\n\t\t\tthis.init()\n\t\t}\n\t}\n\n\t// Register GSAP and plugins\n\tregister(gsap, ScrollTrigger, SplitText) {\n\t\tthis._gsap = gsap\n\t\tthis._ScrollTrigger = ScrollTrigger\n\t\tthis._SplitText = SplitText\n\t}\n\n\t// Function to get a specific option\n\tgetOption(optionName) {\n\t\treturn this.options[optionName]\n\t}\n\n\t// Initialisation function\n\tinit() {\n\t\t// Check if gsap is registered\n\t\tif (this._gsap === null || this._gsap === undefined) {\n\t\t\tconsole.log('GSAP is not registered. Exiting')\n\t\t\treturn\n\t\t}\n\n\t\t// Check if ScrollTrigger is registered\n\t\tif (this._ScrollTrigger === null || this._ScrollTrigger === undefined) {\n\t\t\tconsole.log('ScrollTrigger is not registered. Exiting')\n\t\t\treturn\n\t\t}\n\n\t\t// Check if SplitText is registered\n\t\tif (this._SplitText === null || this._SplitText === undefined) {\n\t\t\tconsole.log('SplitText is not registered. data-inview-split is disabled.')\n\t\t}\n\n\t\ttry {\n\t\t\t// Convert elements to an array and loop through each\n\t\t\tthis._gsap.utils.toArray(this.getOption('elements')).forEach((parent, index) => {\n\t\t\t\t// Define array to hold animated elements\n\t\t\t\tlet animatedElementsList = []\n\n\t\t\t\t// If the parent doesn't have 'data-inview-scope' attribute,\n\t\t\t\t// add it to the animated elements\n\t\t\t\t// Otherwise, add scoped, child, and split elements\n\t\t\t\tif (!parent.hasAttribute('data-inview-scope')) {\n\t\t\t\t\tanimatedElementsList.push({ el: parent, order: parent.dataset.inviewOrder })\n\t\t\t\t} else {\n\t\t\t\t\tthis.addScopedElements(parent, animatedElementsList)\n\t\t\t\t\tthis.addChildElements(parent, animatedElementsList)\n\t\t\t\t\tthis.addSplitElements(parent, animatedElementsList)\n\t\t\t\t}\n\n\t\t\t\t// Order the animated elements based on their 'order' property\n\t\t\t\tthis.sortAnimatedElements(animatedElementsList)\n\n\t\t\t\t// Animate the elements\n\t\t\t\tthis.animateElements(parent, animatedElementsList, index)\n\t\t\t})\n\t\t} catch (error) {\n\t\t\t// Catch and log any errors\n\t\t\tconsole.error('Error initialising InviewDetection:', error)\n\t\t}\n\t}\n\n\t// Function to register event listeners\n\ton(eventName, listener) {\n\t\tif (!this.eventListeners[eventName]) {\n\t\t\tthis.eventListeners[eventName] = []\n\t\t}\n\t\tthis.eventListeners[eventName].push(listener)\n\t}\n\n\t// Function to emit events\n\temit(eventName, element) {\n\t\tconst eventListeners = this.eventListeners[eventName]\n\t\tif (eventListeners) {\n\t\t\teventListeners.forEach((listener) => {\n\t\t\t\tlistener(element)\n\t\t\t})\n\t\t}\n\t}\n\n\t// Function to load and initialize the class\n\tstart() {\n\t\t// Initialize the class\n\t\tthis.init()\n\t}\n\n\t// Function to add scoped elements to the animatedElementsList array\n\taddScopedElements(parent, animatedElementsList) {\n\t\ttry {\n\t\t\t// If the parent has 'data-inview-scope' attribute,\n\t\t\t// add all elements defined in this attribute to the animatedElementsList array\n\t\t\tif (parent.dataset.inviewScope) {\n\t\t\t\tparent.querySelectorAll(':scope ' + parent.dataset.inviewScope).forEach((element) => {\n\t\t\t\t\tconst order = parseFloat(element.dataset.inviewOrder)\n\t\t\t\t\tanimatedElementsList.push({ el: element, order: order })\n\t\t\t\t\tthis.animatedElementsList.push(element)\n\t\t\t\t})\n\t\t\t}\n\t\t} catch (error) {\n\t\t\t// Catch and log any errors\n\t\t\tconsole.error('Error adding scoped elements:', error)\n\t\t}\n\t}\n\n\t// Function to add child elements to the animatedElementsList array\n\taddChildElements(parent, animatedElementsList) {\n\t\ttry {\n\t\t\t// Add all elements with 'data-inview-child' attribute to the animatedElementsList array\n\t\t\tparent.querySelectorAll(':scope [data-inview-child]').forEach((element) => {\n\t\t\t\tconst order = parseFloat(element.dataset.inviewOrder)\n\t\t\t\tanimatedElementsList.push({ el: element, order: order })\n\t\t\t\tthis.animatedElementsList.push(element)\n\t\t\t})\n\t\t} catch (error) {\n\t\t\t// Catch and log any errors\n\t\t\tconsole.error('Error adding child elements:', error)\n\t\t}\n\t}\n\n\t// Function to find the closest parent with 'data-inview-order' attribute\n\tfindClosestParentOrderAttr(element) {\n\t\tlet parent = element.parentElement\n\t\tlet ancestorsIndexed = 0\n\t\tlet ancestorsLimit = 5\n\t\t// Iterate through parent elements up to ancestorsLimit\n\t\twhile (parent && ancestorsIndexed <= ancestorsLimit) {\n\t\t\tif (parent.hasAttribute('data-inview-order')) {\n\t\t\t\treturn parseFloat(parent.getAttribute('data-inview-order'))\n\t\t\t}\n\t\t\tparent = parent.parentElement\n\t\t\tancestorsIndexed++\n\t\t}\n\t\tif (element.hasAttribute('data-inview-order')) {\n\t\t\tconst value = element.getAttribute('data-inview-order')\n\t\t\treturn isNaN(+value) ? false : +value\n\t\t}\n\t\treturn false\n\t}\n\n\t// Function to add split elements to the animatedElementsList array\n\taddSplitElements(parent, animatedElementsList) {\n\t\tconst splitElements = parent.querySelectorAll(':scope *:where([data-inview-split])')\n\t\tconst splitElementsParent = Array.from(splitElements).filter((element) => element.dataset.inviewSplit)\n\t\tconst selfToSplit = Array.from(splitElements).filter((element) => !element.dataset.inviewSplit)\n\n\t\tlet elementsToSplit = [...selfToSplit, ...this.getSplitChildren(splitElementsParent)]\n\n\t\t// For each element to split, add it to the animatedElementsList array\n\t\telementsToSplit.forEach((splitElement) => {\n\t\t\t// If splitElement is a NodeList, handle each Node individually\n\t\t\tif (splitElement instanceof NodeList) {\n\t\t\t\tsplitElement.forEach((node) => this.addSplitElement(node, animatedElementsList))\n\t\t\t} else {\n\t\t\t\tthis.addSplitElement(splitElement, animatedElementsList)\n\t\t\t}\n\t\t})\n\t}\n\n\t// Function to get split children\n\tgetSplitChildren(splitElementsParent) {\n\t\tlet splitChildren = []\n\n\t\t// For each split parent, add its children to splitChildren array\n\t\tsplitElementsParent.forEach((splitParent) => {\n\t\t\tsplitChildren = [\n\t\t\t\t...splitChildren,\n\t\t\t\t...splitParent.querySelectorAll(':scope ' + splitParent.dataset.inviewSplit),\n\t\t\t]\n\t\t})\n\n\t\treturn splitChildren\n\t}\n\n\t// Function to add a split element to the animatedElementsList array\n\taddSplitElement(splitElement, animatedElementsList) {\n\t\tif (this._SplitText) {\n\t\t\ttry {\n\t\t\t\t// Check if splitElement is a DOM element\n\t\t\t\tif (splitElement instanceof Element) {\n\t\t\t\t\t// Find the closest parent with 'data-inview-order' attribute\n\t\t\t\t\tlet order = this.findClosestParentOrderAttr(splitElement)\n\n\t\t\t\t\t// Split the text of the splitElement into lines\n\t\t\t\t\tconst splitChildren = new this._SplitText(splitElement, {\n\t\t\t\t\t\ttype: 'lines',\n\t\t\t\t\t\tlinesClass: 'lineChild',\n\t\t\t\t\t})\n\n\t\t\t\t\t// For each line, add it to the animatedElementsList array\n\t\t\t\t\tsplitChildren.lines.forEach((line) => {\n\t\t\t\t\t\tif (order) {\n\t\t\t\t\t\t\torder += 0.01\n\t\t\t\t\t\t\tline.dataset.inviewOrder = order.toFixed(2)\n\t\t\t\t\t\t\tanimatedElementsList.push({\n\t\t\t\t\t\t\t\tel: line,\n\t\t\t\t\t\t\t\torder: order,\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\tthis.animatedElementsList.push(line)\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tanimatedElementsList.push({\n\t\t\t\t\t\t\t\tel: line,\n\t\t\t\t\t\t\t\torder: false,\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\tthis.animatedElementsList.push(line)\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Set visibility to visible\n\t\t\t\t\t\tline.style.visibility = 'visible'\n\t\t\t\t\t})\n\t\t\t\t} else {\n\t\t\t\t\t// Log an error if splitElement is not a DOM element\n\t\t\t\t\tconsole.error('splitElement is not a DOM element:', splitElement)\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\t// Catch and log any errors\n\t\t\t\tconsole.error('Error splitting element:', error)\n\t\t\t}\n\t\t}\n\t}\n\n\t// Function to order animated elements based on their 'order' property\n\tsortAnimatedElements(animatedElementsList) {\n\t\tanimatedElementsList.sort((a, b) => {\n\t\t\treturn (a['order'] ?? 1) - (b['order'] ?? -1)\n\t\t})\n\n\t\t// Replace each animatedElement object with its corresponding element\n\t\tfor (let i = 0; i < animatedElementsList.length; i++) {\n\t\t\tanimatedElementsList[i] = animatedElementsList[i].el\n\t\t}\n\t}\n\n\t// Function to animate the elements\n\tanimateElements(parent, animatedElementsList, index) {\n\t\t// Initialise animation property arrays\n\t\tlet animationFromPropertiesArray = []\n\t\tlet animationToPropertiesArray = []\n\n\t\t// Create a matchMedia instance\n\t\tconst matchMedia = this._gsap.matchMedia()\n\n\t\t// Get the screen media query\n\t\tconst screen = parent.dataset.inviewScreen || this.getOption('screen')\n\n\t\t// Initialise a new gsap timeline\n\t\tmatchMedia.add(screen, () => {\n\t\t\tlet timeline = this._gsap.timeline({\n\t\t\t\tscrollTrigger: {\n\t\t\t\t\ttrigger: parent,\n\t\t\t\t\tstart: parent.dataset.inviewStart || this.getOption('start'),\n\t\t\t\t\tinvalidateOnRefresh: true,\n\t\t\t\t\tonEnter: async () => {\n\t\t\t\t\t\ttimeline.play()\n\t\t\t\t\t\ttimeline.hasPlayed = true\n\n\t\t\t\t\t\tparent.classList.add(this.getOption('viewedClass'))\n\n\t\t\t\t\t\t// Check if the parent has the 'data-inview-call' attribute and, if so, dispatch a custom event with the attribute's value as the event name\n\t\t\t\t\t\tif (parent.hasAttribute('data-inview-call')) {\n\t\t\t\t\t\t\tconst customEventName = parent.getAttribute('data-inview-call')\n\t\t\t\t\t\t\twindow.dispatchEvent(\n\t\t\t\t\t\t\t\tnew CustomEvent(customEventName, {\n\t\t\t\t\t\t\t\t\tdetail: {\n\t\t\t\t\t\t\t\t\t\ttarget: parent,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (this.eventListeners['onEnter']) {\n\t\t\t\t\t\t\tthis.emit('onEnter', parent)\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tonLeave: () => {\n\t\t\t\t\t\tif (parent.hasAttribute('data-inview-repeat')) {\n\t\t\t\t\t\t\ttimeline.restart().pause()\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (this.eventListeners['onLeave']) {\n\t\t\t\t\t\t\tthis.emit('onLeave', parent)\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tonEnterBack: async () => {\n\t\t\t\t\t\tif (parent.hasAttribute('data-inview-repeat')) {\n\t\t\t\t\t\t\ttimeline.restart()\n\t\t\t\t\t\t\ttimeline.hasPlayed = true\n\t\t\t\t\t\t} else if (!timeline.hasPlayed) {\n\t\t\t\t\t\t\ttimeline.play()\n\t\t\t\t\t\t\ttimeline.hasPlayed = true\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (this.eventListeners['onEnterBack']) {\n\t\t\t\t\t\t\tthis.emit('onEnterBack', parent)\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tonLeaveBack: () => {\n\t\t\t\t\t\tif (parent.hasAttribute('data-inview-repeat')) {\n\t\t\t\t\t\t\ttimeline.restart().pause()\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (this.eventListeners['onLeaveBack']) {\n\t\t\t\t\t\t\tthis.emit('onLeaveBack', parent)\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tmarkers: parent.hasAttribute('data-inview-debug') ? true : false,\n\t\t\t\t\ttoggleClass: {\n\t\t\t\t\t\ttargets: parent,\n\t\t\t\t\t\tclassName: this.getOption('inviewClass'),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t})\n\n\t\t\ttimeline.hasPlayed = false\n\n\t\t\t// Initialise a variable to hold the current time position on the timeline\n\t\t\tlet currentTime = 0\n\n\t\t\tanimatedElementsList.forEach((element) => {\n\t\t\t\ttry {\n\t\t\t\t\tlet animationFromProperties = this.getOption('animationFrom')\n\t\t\t\t\tlet animationToProperties = this.getOption('animationTo')\n\n\t\t\t\t\t// Check if the element has custom animation properties defined in 'data-inview-from' and 'data-inview-to'\n\t\t\t\t\tif (element.dataset.inviewFrom) {\n\t\t\t\t\t\tanimationFromProperties = JSON.parse(element.dataset.inviewFrom)\n\t\t\t\t\t} else if (parent.dataset.inviewFrom) {\n\t\t\t\t\t\tanimationFromProperties = JSON.parse(parent.dataset.inviewFrom)\n\t\t\t\t\t}\n\n\t\t\t\t\tif (element.dataset.inviewTo) {\n\t\t\t\t\t\tanimationToProperties = JSON.parse(element.dataset.inviewTo)\n\t\t\t\t\t} else if (parent.dataset.inviewTo) {\n\t\t\t\t\t\tanimationToProperties = JSON.parse(parent.dataset.inviewTo)\n\t\t\t\t\t}\n\n\t\t\t\t\t// Push the properties for this element to the arrays\n\t\t\t\t\tanimationFromPropertiesArray.push(animationFromProperties)\n\t\t\t\t\tanimationToPropertiesArray.push(animationToProperties)\n\n\t\t\t\t\t// Set initial animation properties for the animated elements\n\t\t\t\t\tthis._gsap.set(element, animationFromProperties)\n\n\t\t\t\t\t// Get the stagger time\n\t\t\t\t\tlet staggerTime = parent.dataset.inviewStagger || this.getOption('stagger')\n\n\t\t\t\t\t// Add the animation to the timeline\n\t\t\t\t\ttimeline.to(\n\t\t\t\t\t\telement,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t...animationToProperties,\n\t\t\t\t\t\t\tduration: parent.dataset.inviewDuration || this.getOption('duration'),\n\t\t\t\t\t\t\tdelay: parent.dataset.inviewDelay || this.getOption('delay'),\n\t\t\t\t\t\t\tease: parent.dataset.inviewEase || this.getOption('ease'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tcurrentTime\n\t\t\t\t\t)\n\n\t\t\t\t\t// Increase the current time position by the stagger time for the next animation\n\t\t\t\t\tcurrentTime += parseFloat(staggerTime)\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconsole.error(`An error occurred while animating the element: ${e}`)\n\t\t\t\t}\n\t\t\t})\n\n\t\t\t// Pause the timeline initially, the onEnter/onEnterBack events will play/restart it\n\t\t\ttimeline.pause()\n\t\t})\n\n\t\t// Debug mode\n\t\tif (parent.hasAttribute('data-inview-debug')) {\n\t\t\tthis.debugMode(\n\t\t\t\tparent,\n\t\t\t\tanimatedElementsList,\n\t\t\t\tanimationFromPropertiesArray,\n\t\t\t\tanimationToPropertiesArray,\n\t\t\t\tindex\n\t\t\t)\n\t\t}\n\t}\n\n\t// Function for debug mode logging\n\tdebugMode(parent, animatedElementsList, animationFromProperties, animationToProperties, index) {\n\t\tconsole.group(`InviewDetection() debug instance (#${index + 1})`)\n\t\tconsole.log({\n\t\t\tparent: parent,\n\t\t\telements: animatedElementsList,\n\t\t\tscreen: this.getOption('screen'),\n\t\t\tanimationFrom: animationFromProperties,\n\t\t\tanimationTo: animationToProperties,\n\t\t\tduration: this.getOption('duration'),\n\t\t\tdelay: this.getOption('delay'),\n\t\t\tstart: this.getOption('start'),\n\t\t\tease: this.getOption('ease'),\n\t\t\tstagger: this.getOption('stagger'),\n\t\t})\n\t\tconsole.groupEnd()\n\t}\n\n\t// Function to refresh ScrollTrigger instances\n\trefresh() {\n\t\tthis._ScrollTrigger.refresh()\n\n\t\tif (this.eventListeners['refresh']) {\n\t\t\tthis.emit('refresh', parent)\n\t\t}\n\t}\n\n\t// Function to stop the animations and ScrollTrigger instances\n\tstop() {\n\t\t// Kill ScrollTrigger instances created in this script\n\t\tthis.triggers.forEach((st) => st.kill())\n\n\t\t// Kill all animations\n\t\tconst allElements = this._gsap.utils.toArray(this.getOption('elements')).concat(this.animatedElementsList)\n\n\t\tallElements.forEach((element) => {\n\t\t\tthis._gsap.killTweensOf(element)\n\t\t})\n\n\t\tif (this.eventListeners['stop']) {\n\t\t\tthis.emit('stop', parent)\n\t\t}\n\t}\n\n\t// Function to restart the animations and reinitialise everything\n\trestart() {\n\t\t// Kill all GSAP animations of the elements\n\t\tthis._gsap.utils.toArray(this.getOption('elements')).forEach((element) => {\n\t\t\tthis._gsap.killTweensOf(element)\n\t\t})\n\n\t\t// Reinitialise everything\n\t\tthis.init()\n\n\t\tif (this.eventListeners['restart']) {\n\t\t\tthis.emit('restart', parent)\n\t\t}\n\t}\n}\n"],"names":["InviewDetection","options","gsap","ScrollTrigger","SplitText","this","_gsap","_ScrollTrigger","_SplitText","defaultOptions","elements","duration","delay","start","ease","stagger","animationFrom","opacity","y","animationTo","screen","autoStart","inviewClass","viewedClass","_extends","triggers","animatedElementsList","eventListeners","getOption","init","_proto","prototype","register","optionName","_this","console","log","utils","toArray","forEach","parent","index","hasAttribute","addScopedElements","addChildElements","addSplitElements","push","el","order","dataset","inviewOrder","sortAnimatedElements","animateElements","error","on","eventName","listener","emit","element","_this2","inviewScope","querySelectorAll","parseFloat","_this3","findClosestParentOrderAttr","parentElement","ancestorsIndexed","getAttribute","value","isNaN","_this4","splitElements","splitElementsParent","Array","from","filter","inviewSplit","selfToSplit","getSplitChildren","splitElement","NodeList","node","addSplitElement","splitChildren","splitParent","_this5","Element","type","linesClass","lines","line","toFixed","style","visibility","sort","a","b","_a$order","_b$order","i","length","_this6","animationFromPropertiesArray","animationToPropertiesArray","matchMedia","inviewScreen","add","timeline","scrollTrigger","trigger","inviewStart","invalidateOnRefresh","onEnter","play","hasPlayed","classList","customEventName","window","dispatchEvent","CustomEvent","detail","target","Promise","resolve","onLeave","restart","pause","onEnterBack","onLeaveBack","markers","toggleClass","targets","className","currentTime","animationFromProperties","animationToProperties","inviewFrom","JSON","parse","inviewTo","set","staggerTime","inviewStagger","to","inviewDuration","inviewDelay","inviewEase","e","debugMode","group","groupEnd","refresh","stop","_this7","st","kill","concat","killTweensOf","_this8"],"mappings":"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"}