{"version":3,"file":"inview-detection.js","sources":["../src/index.js"],"sourcesContent":["/**\n * Written by Elliott Mangham at Code Resolution. Maintained by Code Resolution.\n * made@coderesolution.com\n */\nexport default class InviewDetection {\n\tconstructor(options = {}, gsap = null, ScrollTrigger = null) {\n\t\t// Set dependencies\n\t\tthis._gsap = gsap\n\t\tthis._ScrollTrigger = ScrollTrigger\n\n\t\t// Define default options\n\t\tthis.defaultOptions = {\n\t\t\telements: '[data-inview]',\n\t\t\tduration: 1,\n\t\t\tdelay: 0.1,\n\t\t\tstart: 'top 90%',\n\t\t\tease: 'power4',\n\t\t\tstagger: 0.08,\n\t\t\tanimationFrom: {\n\t\t\t\topacity: 0,\n\t\t\t\t'will-change': 'transform',\n\t\t\t\ty: 20,\n\t\t\t},\n\t\t\tanimationTo: {\n\t\t\t\topacity: 1,\n\t\t\t\ty: 0,\n\t\t\t},\n\t\t\tscreen: '(min-width: 1025px)',\n\t\t\tautoStart: true,\n\t\t\tinviewClass: 'is-inview',\n\t\t\tviewedClass: 'has-viewed',\n\t\t\tdebug: false,\n\t\t}\n\n\t\t// Merge default options with provided options\n\t\tthis.options = { ...this.defaultOptions, ...options }\n\n\t\t// Store ScrollTrigger instances\n\t\tthis.triggers = []\n\n\t\t// Store all animated elements\n\t\tthis.animatedElementsList = []\n\n\t\t// Store event listeners\n\t\tthis.eventListeners = {}\n\n\t\t// Start by default if set\n\t\tif (this.getOption('autoStart')) {\n\t\t\tthis.init()\n\t\t}\n\t}\n\n\t// Register GSAP and plugins\n\tregister(gsap, ScrollTrigger) {\n\t\tthis._gsap = gsap\n\t\tthis._ScrollTrigger = ScrollTrigger\n\t}\n\n\t// Function to get a specific option\n\tgetOption(optionName) {\n\t\treturn this.options[optionName]\n\t}\n\n\t// Initialisation function\n\tinit() {\n\t\t// Check if gsap is registered\n\t\tif (this._gsap === null || this._gsap === undefined) {\n\t\t\tconsole.log('GSAP is not registered. Exiting')\n\t\t\treturn\n\t\t}\n\n\t\t// Check if ScrollTrigger is registered\n\t\tif (this._ScrollTrigger === null || this._ScrollTrigger === undefined) {\n\t\t\tconsole.log('ScrollTrigger is not registered. Exiting')\n\t\t\treturn\n\t\t}\n\n\t\ttry {\n\t\t\t// Convert elements to an array and loop through each\n\t\t\tthis._gsap.utils.toArray(this.getOption('elements')).forEach((parent, index) => {\n\t\t\t\t// Define array to hold animated elements\n\t\t\t\tlet animatedElementsList = []\n\n\t\t\t\t// If the parent doesn't have 'data-inview-scope' attribute,\n\t\t\t\t// add it to the animated elements\n\t\t\t\t// Otherwise, add scoped and child elements\n\t\t\t\tif (!parent.hasAttribute('data-inview-scope')) {\n\t\t\t\t\tanimatedElementsList.push({ el: parent, order: parent.dataset.inviewOrder })\n\t\t\t\t} else {\n\t\t\t\t\tthis.addScopedElements(parent, animatedElementsList)\n\t\t\t\t\tthis.addChildElements(parent, animatedElementsList)\n\t\t\t\t}\n\n\t\t\t\t// Order the animated elements based on their 'order' property\n\t\t\t\tthis.sortAnimatedElements(animatedElementsList)\n\n\t\t\t\t// Animate the elements\n\t\t\t\tthis.animateElements(parent, animatedElementsList, index)\n\t\t\t})\n\t\t} catch (error) {\n\t\t\t// Catch and log any errors\n\t\t\tconsole.error('Error initialising InviewDetection:', error)\n\t\t}\n\t}\n\n\t// Function to register event listeners\n\ton(eventName, listener) {\n\t\tif (!this.eventListeners[eventName]) {\n\t\t\tthis.eventListeners[eventName] = []\n\t\t}\n\t\tthis.eventListeners[eventName].push(listener)\n\t}\n\n\t// Function to emit events\n\temit(eventName, element) {\n\t\tconst eventListeners = this.eventListeners[eventName]\n\t\tif (eventListeners) {\n\t\t\teventListeners.forEach((listener) => {\n\t\t\t\tlistener(element)\n\t\t\t})\n\t\t}\n\t}\n\n\t// Function to load and initialize the class\n\tstart() {\n\t\t// Initialize the class\n\t\tthis.init()\n\t}\n\n\t// Function to add scoped elements to the animatedElementsList array\n\taddScopedElements(parent, animatedElementsList) {\n\t\ttry {\n\t\t\t// If the parent has 'data-inview-scope' attribute,\n\t\t\t// add all elements defined in this attribute to the animatedElementsList array\n\t\t\tif (parent.dataset.inviewScope) {\n\t\t\t\tparent.querySelectorAll(':scope ' + parent.dataset.inviewScope).forEach((element) => {\n\t\t\t\t\tconst order = parseFloat(element.dataset.inviewOrder)\n\t\t\t\t\tanimatedElementsList.push({ el: element, order: order })\n\t\t\t\t\tthis.animatedElementsList.push(element)\n\t\t\t\t})\n\t\t\t}\n\t\t} catch (error) {\n\t\t\t// Catch and log any errors\n\t\t\tconsole.error('Error adding scoped elements:', error)\n\t\t}\n\t}\n\n\t// Function to add child elements to the animatedElementsList array\n\taddChildElements(parent, animatedElementsList) {\n\t\ttry {\n\t\t\t// Add all elements with 'data-inview-child' attribute to the animatedElementsList array\n\t\t\tparent.querySelectorAll(':scope [data-inview-child]').forEach((element) => {\n\t\t\t\tconst order = parseFloat(element.dataset.inviewOrder)\n\t\t\t\tanimatedElementsList.push({ el: element, order: order })\n\t\t\t\tthis.animatedElementsList.push(element)\n\t\t\t})\n\t\t} catch (error) {\n\t\t\t// Catch and log any errors\n\t\t\tconsole.error('Error adding child elements:', error)\n\t\t}\n\t}\n\n\t// Function to find the closest parent with 'data-inview-order' attribute\n\tfindClosestParentOrderAttr(element) {\n\t\tlet parent = element.parentElement\n\t\tlet ancestorsIndexed = 0\n\t\tlet ancestorsLimit = 5\n\n\t\t// Iterate through parent elements up to ancestorsLimit\n\t\twhile (parent && ancestorsIndexed <= ancestorsLimit) {\n\t\t\tif (parent.hasAttribute('data-inview-order')) {\n\t\t\t\treturn parseFloat(parent.getAttribute('data-inview-order'))\n\t\t\t}\n\t\t\tparent = parent.parentElement\n\t\t\tancestorsIndexed++\n\t\t}\n\n\t\tif (element.hasAttribute('data-inview-order')) {\n\t\t\tconst value = element.getAttribute('data-inview-order')\n\t\t\treturn isNaN(+value) ? false : +value\n\t\t}\n\n\t\treturn false\n\t}\n\n\t// Function to order animated elements based on their 'order' property\n\tsortAnimatedElements(animatedElementsList) {\n\t\tanimatedElementsList.sort((a, b) => {\n\t\t\treturn (a['order'] ?? 1) - (b['order'] ?? -1)\n\t\t})\n\n\t\t// Replace each animatedElement object with its corresponding element\n\t\tfor (let i = 0; i < animatedElementsList.length; i++) {\n\t\t\tanimatedElementsList[i] = animatedElementsList[i].el\n\t\t}\n\t}\n\n\t// Function to animate the elements\n\tanimateElements(parent, animatedElementsList, index) {\n\t\t// Initialise animation property arrays\n\t\tlet animationFromPropertiesArray = []\n\t\tlet animationToPropertiesArray = []\n\n\t\t// Create a matchMedia instance\n\t\tconst matchMedia = this._gsap.matchMedia()\n\n\t\t// Get the screen media query\n\t\tconst screen = parent.dataset.inviewScreen || this.getOption('screen')\n\n\t\t// Initialise a new gsap timeline\n\t\tmatchMedia.add(screen, () => {\n\t\t\tlet timeline = this._gsap.timeline({\n\t\t\t\tscrollTrigger: {\n\t\t\t\t\ttrigger: parent,\n\t\t\t\t\tstart: parent.dataset.inviewStart || this.getOption('start'),\n\t\t\t\t\tinvalidateOnRefresh: true,\n\t\t\t\t\tonEnter: async () => {\n\t\t\t\t\t\ttimeline.play()\n\t\t\t\t\t\ttimeline.hasPlayed = true\n\n\t\t\t\t\t\tparent.classList.add(this.getOption('viewedClass'))\n\n\t\t\t\t\t\t// Check if the parent has the 'data-inview-call' attribute and, if so, dispatch a custom event with the attribute's value as the event name\n\t\t\t\t\t\tif (parent.hasAttribute('data-inview-call')) {\n\t\t\t\t\t\t\tconst customEventName = parent.getAttribute('data-inview-call')\n\t\t\t\t\t\t\twindow.dispatchEvent(\n\t\t\t\t\t\t\t\tnew CustomEvent(customEventName, {\n\t\t\t\t\t\t\t\t\tdetail: {\n\t\t\t\t\t\t\t\t\t\ttarget: parent,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (this.eventListeners['onEnter']) {\n\t\t\t\t\t\t\tthis.emit('onEnter', parent)\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tonLeave: () => {\n\t\t\t\t\t\tif (parent.hasAttribute('data-inview-repeat')) {\n\t\t\t\t\t\t\ttimeline.restart().pause()\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (this.eventListeners['onLeave']) {\n\t\t\t\t\t\t\tthis.emit('onLeave', parent)\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tonEnterBack: async () => {\n\t\t\t\t\t\tif (parent.hasAttribute('data-inview-repeat')) {\n\t\t\t\t\t\t\ttimeline.restart()\n\t\t\t\t\t\t\ttimeline.hasPlayed = true\n\t\t\t\t\t\t} else if (!timeline.hasPlayed) {\n\t\t\t\t\t\t\ttimeline.play()\n\t\t\t\t\t\t\ttimeline.hasPlayed = true\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (this.eventListeners['onEnterBack']) {\n\t\t\t\t\t\t\tthis.emit('onEnterBack', parent)\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tonLeaveBack: () => {\n\t\t\t\t\t\tif (parent.hasAttribute('data-inview-repeat')) {\n\t\t\t\t\t\t\ttimeline.restart().pause()\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (this.eventListeners['onLeaveBack']) {\n\t\t\t\t\t\t\tthis.emit('onLeaveBack', parent)\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tmarkers: this.getOption('debug') || parent.hasAttribute('data-inview-debug') ? true : false, // Modified line to include global debug option\n\t\t\t\t\ttoggleClass: {\n\t\t\t\t\t\ttargets: parent,\n\t\t\t\t\t\tclassName: this.getOption('inviewClass'),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t})\n\n\t\t\ttimeline.hasPlayed = false\n\n\t\t\t// Initialise a variable to hold the current time position on the timeline\n\t\t\tlet currentTime = 0\n\n\t\t\tanimatedElementsList.forEach((element) => {\n\t\t\t\ttry {\n\t\t\t\t\tlet animationFromProperties = this.getOption('animationFrom')\n\t\t\t\t\tlet animationToProperties = this.getOption('animationTo')\n\n\t\t\t\t\t// Check if the element has custom animation properties defined in 'data-inview-from' and 'data-inview-to'\n\t\t\t\t\tif (element.dataset.inviewFrom) {\n\t\t\t\t\t\tanimationFromProperties = JSON.parse(element.dataset.inviewFrom)\n\t\t\t\t\t} else if (parent.dataset.inviewFrom) {\n\t\t\t\t\t\tanimationFromProperties = JSON.parse(parent.dataset.inviewFrom)\n\t\t\t\t\t}\n\n\t\t\t\t\tif (element.dataset.inviewTo) {\n\t\t\t\t\t\tanimationToProperties = JSON.parse(element.dataset.inviewTo)\n\t\t\t\t\t} else if (parent.dataset.inviewTo) {\n\t\t\t\t\t\tanimationToProperties = JSON.parse(parent.dataset.inviewTo)\n\t\t\t\t\t}\n\n\t\t\t\t\t// Push the properties for this element to the arrays\n\t\t\t\t\tanimationFromPropertiesArray.push(animationFromProperties)\n\t\t\t\t\tanimationToPropertiesArray.push(animationToProperties)\n\n\t\t\t\t\t// Set initial animation properties for the animated elements\n\t\t\t\t\tthis._gsap.set(element, animationFromProperties)\n\n\t\t\t\t\t// Get the stagger time\n\t\t\t\t\tlet staggerTime = parent.dataset.inviewStagger || this.getOption('stagger')\n\n\t\t\t\t\t// Add the animation to the timeline\n\t\t\t\t\ttimeline.to(\n\t\t\t\t\t\telement,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t...animationToProperties,\n\t\t\t\t\t\t\tduration: parent.dataset.inviewDuration || this.getOption('duration'),\n\t\t\t\t\t\t\tdelay: parent.dataset.inviewDelay || this.getOption('delay'),\n\t\t\t\t\t\t\tease: parent.dataset.inviewEase || this.getOption('ease'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tcurrentTime\n\t\t\t\t\t)\n\n\t\t\t\t\t// Increase the current time position by the stagger time for the next animation\n\t\t\t\t\tcurrentTime += parseFloat(staggerTime)\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconsole.error(`An error occurred while animating the element: ${e}`)\n\t\t\t\t}\n\t\t\t})\n\n\t\t\t// Pause the timeline initially, the onEnter/onEnterBack events will play/restart it\n\t\t\ttimeline.pause()\n\t\t})\n\n\t\t// Debug mode\n\t\tif (this.getOption('debug') || parent.hasAttribute('data-inview-debug')) {\n\t\t\tthis.debugMode(\n\t\t\t\tparent,\n\t\t\t\tanimatedElementsList,\n\t\t\t\tanimationFromPropertiesArray,\n\t\t\t\tanimationToPropertiesArray,\n\t\t\t\tindex\n\t\t\t)\n\t\t}\n\t}\n\n\t// Function for debug mode logging\n\tdebugMode(parent, animatedElementsList, animationFromProperties, animationToProperties, index) {\n\t\tconsole.group(`InviewDetection() debug instance (#${index + 1})`)\n\t\tconsole.log({\n\t\t\tparent: parent,\n\t\t\telements: animatedElementsList,\n\t\t\tscreen: this.getOption('screen'),\n\t\t\tanimationFrom: animationFromProperties,\n\t\t\tanimationTo: animationToProperties,\n\t\t\tduration: this.getOption('duration'),\n\t\t\tdelay: this.getOption('delay'),\n\t\t\tstart: this.getOption('start'),\n\t\t\tease: this.getOption('ease'),\n\t\t\tstagger: this.getOption('stagger'),\n\t\t})\n\t\tconsole.groupEnd()\n\t}\n\n\t// Function to refresh ScrollTrigger instances\n\trefresh() {\n\t\tthis._ScrollTrigger.refresh()\n\n\t\tif (this.eventListeners['refresh']) {\n\t\t\tthis.emit('refresh', parent)\n\t\t}\n\t}\n\n\t// Function to stop the animations and ScrollTrigger instances\n\tstop() {\n\t\t// Kill ScrollTrigger instances created in this script\n\t\tthis.triggers.forEach((st) => st.kill())\n\n\t\t// Kill all animations\n\t\tconst allElements = this._gsap.utils.toArray(this.getOption('elements')).concat(this.animatedElementsList)\n\n\t\tallElements.forEach((element) => {\n\t\t\tthis._gsap.killTweensOf(element)\n\t\t})\n\n\t\tif (this.eventListeners['stop']) {\n\t\t\tthis.emit('stop', parent)\n\t\t}\n\t}\n\n\t// Function to restart the animations and reinitialise everything\n\trestart() {\n\t\t// Kill all GSAP animations of the elements\n\t\tthis._gsap.utils.toArray(this.getOption('elements')).forEach((element) => {\n\t\t\tthis._gsap.killTweensOf(element)\n\t\t})\n\n\t\t// Reinitialise everything\n\t\tthis.init()\n\n\t\tif (this.eventListeners['restart']) {\n\t\t\tthis.emit('restart', parent)\n\t\t}\n\t}\n}\n"],"names":["InviewDetection","options","gsap","ScrollTrigger","this","_gsap","_ScrollTrigger","defaultOptions","elements","duration","delay","start","ease","stagger","animationFrom","opacity","y","animationTo","screen","autoStart","inviewClass","viewedClass","debug","_extends","triggers","animatedElementsList","eventListeners","getOption","init","_proto","prototype","register","optionName","_this","utils","toArray","forEach","parent","index","hasAttribute","addScopedElements","addChildElements","push","el","order","dataset","inviewOrder","sortAnimatedElements","animateElements","error","console","log","on","eventName","listener","emit","element","_this2","inviewScope","querySelectorAll","parseFloat","_this3","findClosestParentOrderAttr","parentElement","ancestorsIndexed","getAttribute","value","isNaN","sort","a","b","_a$order","_b$order","i","length","_this4","animationFromPropertiesArray","animationToPropertiesArray","matchMedia","inviewScreen","add","timeline","scrollTrigger","trigger","inviewStart","invalidateOnRefresh","onEnter","play","hasPlayed","classList","customEventName","window","dispatchEvent","CustomEvent","detail","target","Promise","resolve","e","reject","onLeave","restart","pause","onEnterBack","onLeaveBack","markers","toggleClass","targets","className","currentTime","animationFromProperties","animationToProperties","inviewFrom","JSON","parse","inviewTo","set","staggerTime","inviewStagger","to","inviewDuration","inviewDelay","inviewEase","debugMode","group","groupEnd","refresh","stop","_this5","st","kill","concat","killTweensOf","_this6"],"mappings":"gQAKC,WAAA,SAAAA,EAAYC,EAAcC,EAAaC,YAA3BF,IAAAA,EAAU,CAAE,QAAEC,IAAAA,IAAAA,EAAO,WAAMC,IAAAA,IAAAA,EAAgB,MAEtDC,KAAKC,MAAQH,EACbE,KAAKE,eAAiBH,EAGtBC,KAAKG,eAAiB,CACrBC,SAAU,gBACVC,SAAU,EACVC,MAAO,GACPC,MAAO,UACPC,KAAM,SACNC,QAAS,IACTC,cAAe,CACdC,QAAS,EACT,cAAe,YACfC,EAAG,IAEJC,YAAa,CACZF,QAAS,EACTC,EAAG,GAEJE,OAAQ,sBACRC,WAAW,EACXC,YAAa,YACbC,YAAa,aACbC,OAAO,GAIRlB,KAAKH,QAAOsB,EAAQ,CAAA,EAAAnB,KAAKG,eAAmBN,GAG5CG,KAAKoB,SAAW,GAGhBpB,KAAKqB,qBAAuB,GAG5BrB,KAAKsB,eAAiB,CAAA,EAGlBtB,KAAKuB,UAAU,cAClBvB,KAAKwB,MAEP,CAAC,IAAAC,EAAA7B,EAAA8B,UA6VA,OA7VAD,EAGDE,SAAA,SAAS7B,EAAMC,GACdC,KAAKC,MAAQH,EACbE,KAAKE,eAAiBH,CACvB,EAAC0B,EAGDF,UAAA,SAAUK,GACT,OAAO5B,KAAKH,QAAQ+B,EACrB,EAACH,EAGDD,KAAA,WAAO,IAAAK,EAAA7B,KAEN,GAAIA,WAAKC,MAMT,GAAID,WAAKE,eAKT,IAECF,KAAKC,MAAM6B,MAAMC,QAAQ/B,KAAKuB,UAAU,aAAaS,QAAQ,SAACC,EAAQC,GAErE,IAAIb,EAAuB,GAKtBY,EAAOE,aAAa,sBAGxBN,EAAKO,kBAAkBH,EAAQZ,GAC/BQ,EAAKQ,iBAAiBJ,EAAQZ,IAH9BA,EAAqBiB,KAAK,CAAEC,GAAIN,EAAQO,MAAOP,EAAOQ,QAAQC,cAO/Db,EAAKc,qBAAqBtB,GAG1BQ,EAAKe,gBAAgBX,EAAQZ,EAAsBa,EACpD,EACD,CAAE,MAAOW,GAERC,QAAQD,MAAM,sCAAuCA,EACtD,MA7BCC,QAAQC,IAAI,iDANZD,QAAQC,IAAI,kCAoCd,EAACtB,EAGDuB,GAAA,SAAGC,EAAWC,GACRlD,KAAKsB,eAAe2B,KACxBjD,KAAKsB,eAAe2B,GAAa,IAElCjD,KAAKsB,eAAe2B,GAAWX,KAAKY,EACrC,EAACzB,EAGD0B,KAAA,SAAKF,EAAWG,GACf,IAAM9B,EAAiBtB,KAAKsB,eAAe2B,GACvC3B,GACHA,EAAeU,QAAQ,SAACkB,GACvBA,EAASE,EACV,EAEF,EAAC3B,EAGDlB,MAAA,WAECP,KAAKwB,MACN,EAACC,EAGDW,kBAAA,SAAkBH,EAAQZ,GAAsBgC,IAAAA,EAC/CrD,KAAA,IAGKiC,EAAOQ,QAAQa,aAClBrB,EAAOsB,iBAAiB,UAAYtB,EAAOQ,QAAQa,aAAatB,QAAQ,SAACoB,GACxE,IAAMZ,EAAQgB,WAAWJ,EAAQX,QAAQC,aACzCrB,EAAqBiB,KAAK,CAAEC,GAAIa,EAASZ,MAAOA,IAChDa,EAAKhC,qBAAqBiB,KAAKc,EAChC,EAEF,CAAE,MAAOP,GAERC,QAAQD,MAAM,gCAAiCA,EAChD,CACD,EAACpB,EAGDY,iBAAA,SAAiBJ,EAAQZ,GAAsBoC,IAAAA,OAC9C,IAECxB,EAAOsB,iBAAiB,8BAA8BvB,QAAQ,SAACoB,GAC9D,IAAMZ,EAAQgB,WAAWJ,EAAQX,QAAQC,aACzCrB,EAAqBiB,KAAK,CAAEC,GAAIa,EAASZ,MAAOA,IAChDiB,EAAKpC,qBAAqBiB,KAAKc,EAChC,EACD,CAAE,MAAOP,GAERC,QAAQD,MAAM,+BAAgCA,EAC/C,CACD,EAACpB,EAGDiC,2BAAA,SAA2BN,GAM1B,IALA,IAAInB,EAASmB,EAAQO,cACjBC,EAAmB,EAIhB3B,GAAU2B,GAHI,GAGgC,CACpD,GAAI3B,EAAOE,aAAa,qBACvB,OAAOqB,WAAWvB,EAAO4B,aAAa,sBAEvC5B,EAASA,EAAO0B,cAChBC,GACD,CAEA,GAAIR,EAAQjB,aAAa,qBAAsB,CAC9C,IAAM2B,EAAQV,EAAQS,aAAa,qBACnC,OAAOE,OAAOD,KAAkBA,CACjC,CAEA,OAAO,CACR,EAACrC,EAGDkB,qBAAA,SAAqBtB,GACpBA,EAAqB2C,KAAK,SAACC,EAAGC,GAAMC,IAAAA,EAAAC,EACnC,OAAkB,OAAXD,EAACF,EAAS,OAACE,EAAI,IAAgB,OAAfC,EAAKF,EAAS,OAACE,GAAK,EAC5C,GAGA,IAAK,IAAIC,EAAI,EAAGA,EAAIhD,EAAqBiD,OAAQD,IAChDhD,EAAqBgD,GAAKhD,EAAqBgD,GAAG9B,EAEpD,EAACd,EAGDmB,gBAAA,SAAgBX,EAAQZ,EAAsBa,GAAOqC,IAAAA,EAEpDvE,KAAIwE,EAA+B,GAC/BC,EAA6B,GAG3BC,EAAa1E,KAAKC,MAAMyE,aAGxB5D,EAASmB,EAAOQ,QAAQkC,cAAgB3E,KAAKuB,UAAU,UAG7DmD,EAAWE,IAAI9D,EAAQ,WACtB,IAAI+D,EAAWN,EAAKtE,MAAM4E,SAAS,CAClCC,cAAe,CACdC,QAAS9C,EACT1B,MAAO0B,EAAOQ,QAAQuC,aAAeT,EAAKhD,UAAU,SACpD0D,qBAAqB,EACrBC,QAAOA,WAAc,IAOpB,GANAL,EAASM,OACTN,EAASO,WAAY,EAErBnD,EAAOoD,UAAUT,IAAIL,EAAKhD,UAAU,gBAGhCU,EAAOE,aAAa,oBAAqB,CAC5C,IAAMmD,EAAkBrD,EAAO4B,aAAa,oBAC5C0B,OAAOC,cACN,IAAIC,YAAYH,EAAiB,CAChCI,OAAQ,CACPC,OAAQ1D,KAIZ,CAIC,OAFGsC,EAAKjD,eAAwB,SAChCiD,EAAKpB,KAAK,UAAWlB,GACrB2D,QAAAC,SACF,CAAC,MAAAC,UAAAF,QAAAG,OAAAD,EAAA,CAAA,EACDE,QAAS,WACJ/D,EAAOE,aAAa,uBACvB0C,EAASoB,UAAUC,QAEhB3B,EAAKjD,eAAwB,SAChCiD,EAAKpB,KAAK,UAAWlB,EAEvB,EACAkE,YAAWA,WAAc,IAUvB,OATGlE,EAAOE,aAAa,uBACvB0C,EAASoB,UACTpB,EAASO,WAAY,GACVP,EAASO,YACpBP,EAASM,OACTN,EAASO,WAAY,GAElBb,EAAKjD,eAA4B,aACpCiD,EAAKpB,KAAK,cAAelB,GACzB2D,QAAAC,SACF,CAAC,MAAAC,GAAA,OAAAF,QAAAG,OAAAD,EACDM,CAAAA,EAAAA,YAAa,WACRnE,EAAOE,aAAa,uBACvB0C,EAASoB,UAAUC,QAEhB3B,EAAKjD,eAA4B,aACpCiD,EAAKpB,KAAK,cAAelB,EAE3B,EACAoE,WAAS9B,EAAKhD,UAAU,WAAYU,EAAOE,aAAa,sBACxDmE,YAAa,CACZC,QAAStE,EACTuE,UAAWjC,EAAKhD,UAAU,mBAK7BsD,EAASO,WAAY,EAGrB,IAAIqB,EAAc,EAElBpF,EAAqBW,QAAQ,SAACoB,GAC7B,IACC,IAAIsD,EAA0BnC,EAAKhD,UAAU,iBACzCoF,EAAwBpC,EAAKhD,UAAU,eAGvC6B,EAAQX,QAAQmE,WACnBF,EAA0BG,KAAKC,MAAM1D,EAAQX,QAAQmE,YAC3C3E,EAAOQ,QAAQmE,aACzBF,EAA0BG,KAAKC,MAAM7E,EAAOQ,QAAQmE,aAGjDxD,EAAQX,QAAQsE,SACnBJ,EAAwBE,KAAKC,MAAM1D,EAAQX,QAAQsE,UACzC9E,EAAOQ,QAAQsE,WACzBJ,EAAwBE,KAAKC,MAAM7E,EAAOQ,QAAQsE,WAInDvC,EAA6BlC,KAAKoE,GAClCjC,EAA2BnC,KAAKqE,GAGhCpC,EAAKtE,MAAM+G,IAAI5D,EAASsD,GAGxB,IAAIO,EAAchF,EAAOQ,QAAQyE,eAAiB3C,EAAKhD,UAAU,WAGjEsD,EAASsC,GACR/D,EAAOjC,EAAA,CAAA,EAEHwF,EACHtG,CAAAA,SAAU4B,EAAOQ,QAAQ2E,gBAAkB7C,EAAKhD,UAAU,YAC1DjB,MAAO2B,EAAOQ,QAAQ4E,aAAe9C,EAAKhD,UAAU,SACpDf,KAAMyB,EAAOQ,QAAQ6E,YAAc/C,EAAKhD,UAAU,UAEnDkF,GAIDA,GAAejD,WAAWyD,EAC3B,CAAE,MAAOnB,GACRhD,QAAQD,MAAwDiD,kDAAAA,EACjE,CACD,GAGAjB,EAASqB,OACV,IAGIlG,KAAKuB,UAAU,UAAYU,EAAOE,aAAa,uBAClDnC,KAAKuH,UACJtF,EACAZ,EACAmD,EACAC,EACAvC,EAGH,EAACT,EAGD8F,UAAA,SAAUtF,EAAQZ,EAAsBqF,EAAyBC,EAAuBzE,GACvFY,QAAQ0E,MAAK,uCAAuCtF,EAAQ,GAAI,KAChEY,QAAQC,IAAI,CACXd,OAAQA,EACR7B,SAAUiB,EACVP,OAAQd,KAAKuB,UAAU,UACvBb,cAAegG,EACf7F,YAAa8F,EACbtG,SAAUL,KAAKuB,UAAU,YACzBjB,MAAON,KAAKuB,UAAU,SACtBhB,MAAOP,KAAKuB,UAAU,SACtBf,KAAMR,KAAKuB,UAAU,QACrBd,QAAST,KAAKuB,UAAU,aAEzBuB,QAAQ2E,UACT,EAAChG,EAGDiG,QAAA,WACC1H,KAAKE,eAAewH,UAEhB1H,KAAKsB,eAAwB,SAChCtB,KAAKmD,KAAK,UAAWlB,OAEvB,EAACR,EAGDkG,KAAA,WAAO,IAAAC,EAAA5H,KAENA,KAAKoB,SAASY,QAAQ,SAAC6F,GAAO,OAAAA,EAAGC,MAAM,GAGnB9H,KAAKC,MAAM6B,MAAMC,QAAQ/B,KAAKuB,UAAU,aAAawG,OAAO/H,KAAKqB,sBAEzEW,QAAQ,SAACoB,GACpBwE,EAAK3H,MAAM+H,aAAa5E,EACzB,GAEIpD,KAAKsB,eAAqB,MAC7BtB,KAAKmD,KAAK,OAAQlB,OAEpB,EAACR,EAGDwE,QAAA,WAAU,IAAAgC,EAAAjI,KAETA,KAAKC,MAAM6B,MAAMC,QAAQ/B,KAAKuB,UAAU,aAAaS,QAAQ,SAACoB,GAC7D6E,EAAKhI,MAAM+H,aAAa5E,EACzB,GAGApD,KAAKwB,OAEDxB,KAAKsB,eAAwB,SAChCtB,KAAKmD,KAAK,UAAWlB,OAEvB,EAACrC,CAAA,CA1YD"}