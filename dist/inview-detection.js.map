{"version":3,"file":"inview-detection.js","sources":["../src/index.js"],"sourcesContent":["/**\n * Written by Elliott Mangham at Code Resolution.\n * Maintained by Code Resolution.\n * made@coderesolution.com\n */\nexport default class InviewDetection {\n\tconstructor(options = {}, gsap = null, ScrollTrigger = null, SplitText = null) {\n\t\t// Set dependencies\n\t\tthis._gsap = gsap\n\t\tthis._ScrollTrigger = ScrollTrigger\n\t\tthis._SplitText = SplitText\n\n\t\t// Define default options\n\t\tthis.defaultOptions = {\n\t\t\telements: '[data-inview]',\n\t\t\tduration: 1,\n\t\t\tdelay: 0.1,\n\t\t\tstart: 'top 90%',\n\t\t\tease: 'power4',\n\t\t\tstagger: 0.08,\n\t\t\tanimationFrom: {\n\t\t\t\topacity: 0,\n\t\t\t\t'will-change': 'transform',\n\t\t\t\ty: 20,\n\t\t\t},\n\t\t\tanimationTo: {\n\t\t\t\topacity: 1,\n\t\t\t\ty: 0,\n\t\t\t},\n\t\t\tscreen: '(min-width: 1025px)',\n\t\t\tautoStart: true,\n\t\t\tinviewClass: 'is-inview',\n\t\t\tviewedClass: 'has-viewed',\n\t\t}\n\n\t\t// Merge default options with provided options\n\t\tthis.options = { ...this.defaultOptions, ...options }\n\n\t\t// Store ScrollTrigger instances\n\t\tthis.triggers = []\n\n\t\t// Store all animated elements\n\t\tthis.animatedElementsList = []\n\n\t\t// Store event listeners\n\t\tthis.eventListeners = {}\n\n\t\t// Start by default if set\n\t\tif (this.getOption('autoStart')) {\n\t\t\tthis.init()\n\t\t}\n\t}\n\n\t// Register GSAP and plugins\n\tregister(gsap, ScrollTrigger, SplitText) {\n\t\tthis._gsap = gsap\n\t\tthis._ScrollTrigger = ScrollTrigger\n\t\tthis._SplitText = SplitText\n\t}\n\n\t// Function to get a specific option\n\tgetOption(optionName) {\n\t\treturn this.options[optionName]\n\t}\n\n\t// Initialisation function\n\tinit() {\n\t\t// Check if gsap is registered\n\t\tif (this._gsap === null || this._gsap === undefined) {\n\t\t\tconsole.log('GSAP is not registered. Exiting')\n\t\t\treturn\n\t\t}\n\n\t\t// Check if ScrollTrigger is registered\n\t\tif (this._ScrollTrigger === null || this._ScrollTrigger === undefined) {\n\t\t\tconsole.log('ScrollTrigger is not registered. Exiting')\n\t\t\treturn\n\t\t}\n\n\t\t// Check if SplitText is registered\n\t\tif (this._SplitText === null || this._SplitText === undefined) {\n\t\t\tconsole.log('SplitText is not registered. data-inview-split is disabled.')\n\t\t}\n\n\t\ttry {\n\t\t\t// Convert elements to an array and loop through each\n\t\t\tthis._gsap.utils.toArray(this.getOption('elements')).forEach((parent, index) => {\n\t\t\t\t// Define array to hold animated elements\n\t\t\t\tlet animatedElementsList = []\n\n\t\t\t\t// If the parent doesn't have 'data-inview-scope' attribute,\n\t\t\t\t// add it to the animated elements\n\t\t\t\t// Otherwise, add scoped, child, and split elements\n\t\t\t\tif (!parent.hasAttribute('data-inview-scope')) {\n\t\t\t\t\tanimatedElementsList.push({ el: parent, order: parent.dataset.inviewOrder })\n\t\t\t\t} else {\n\t\t\t\t\tthis.addScopedElements(parent, animatedElementsList)\n\t\t\t\t\tthis.addChildElements(parent, animatedElementsList)\n\t\t\t\t\tthis.addSplitElements(parent, animatedElementsList)\n\t\t\t\t}\n\n\t\t\t\t// Order the animated elements based on their 'order' property\n\t\t\t\tthis.sortAnimatedElements(animatedElementsList)\n\n\t\t\t\t// Animate the elements\n\t\t\t\tthis.animateElements(parent, animatedElementsList, index)\n\t\t\t})\n\t\t} catch (error) {\n\t\t\t// Catch and log any errors\n\t\t\tconsole.error('Error initialising InviewDetection:', error)\n\t\t}\n\t}\n\n\t// Function to register event listeners\n\ton(eventName, listener) {\n\t\tif (!this.eventListeners[eventName]) {\n\t\t\tthis.eventListeners[eventName] = []\n\t\t}\n\t\tthis.eventListeners[eventName].push(listener)\n\t}\n\n\t// Function to emit events\n\temit(eventName, element) {\n\t\tconst eventListeners = this.eventListeners[eventName]\n\t\tif (eventListeners) {\n\t\t\teventListeners.forEach((listener) => {\n\t\t\t\tlistener(element)\n\t\t\t})\n\t\t}\n\t}\n\n\t// Function to load and initialize the class\n\tstart() {\n\t\t// Initialize the class\n\t\tthis.init()\n\t}\n\n\t// Function to add scoped elements to the animatedElementsList array\n\taddScopedElements(parent, animatedElementsList) {\n\t\ttry {\n\t\t\t// If the parent has 'data-inview-scope' attribute,\n\t\t\t// add all elements defined in this attribute to the animatedElementsList array\n\t\t\tif (parent.dataset.inviewScope) {\n\t\t\t\tparent.querySelectorAll(':scope ' + parent.dataset.inviewScope).forEach((element) => {\n\t\t\t\t\tconst order = parseFloat(element.dataset.inviewOrder)\n\t\t\t\t\tanimatedElementsList.push({ el: element, order: order })\n\t\t\t\t\tthis.animatedElementsList.push(element)\n\t\t\t\t})\n\t\t\t}\n\t\t} catch (error) {\n\t\t\t// Catch and log any errors\n\t\t\tconsole.error('Error adding scoped elements:', error)\n\t\t}\n\t}\n\n\t// Function to add child elements to the animatedElementsList array\n\taddChildElements(parent, animatedElementsList) {\n\t\ttry {\n\t\t\t// Add all elements with 'data-inview-child' attribute to the animatedElementsList array\n\t\t\tparent.querySelectorAll(':scope [data-inview-child]').forEach((element) => {\n\t\t\t\tconst order = parseFloat(element.dataset.inviewOrder)\n\t\t\t\tanimatedElementsList.push({ el: element, order: order })\n\t\t\t\tthis.animatedElementsList.push(element)\n\t\t\t})\n\t\t} catch (error) {\n\t\t\t// Catch and log any errors\n\t\t\tconsole.error('Error adding child elements:', error)\n\t\t}\n\t}\n\n\t// Function to find the closest parent with 'data-inview-order' attribute\n\tfindClosestParentOrderAttr(element) {\n\t\tlet parent = element.parentElement\n\t\tlet ancestorsIndexed = 0\n\t\tlet ancestorsLimit = 5\n\t\t// Iterate through parent elements up to ancestorsLimit\n\t\twhile (parent && ancestorsIndexed <= ancestorsLimit) {\n\t\t\tif (parent.hasAttribute('data-inview-order')) {\n\t\t\t\treturn parseFloat(parent.getAttribute('data-inview-order'))\n\t\t\t}\n\t\t\tparent = parent.parentElement\n\t\t\tancestorsIndexed++\n\t\t}\n\t\tif (element.hasAttribute('data-inview-order')) {\n\t\t\tconst value = element.getAttribute('data-inview-order')\n\t\t\treturn isNaN(+value) ? false : +value\n\t\t}\n\t\treturn false\n\t}\n\n\t// Function to add split elements to the animatedElementsList array\n\taddSplitElements(parent, animatedElementsList) {\n\t\tconst splitElements = parent.querySelectorAll(':scope *:where([data-inview-split])')\n\t\tconst splitElementsParent = Array.from(splitElements).filter((element) => element.dataset.inviewSplit)\n\t\tconst selfToSplit = Array.from(splitElements).filter((element) => !element.dataset.inviewSplit)\n\n\t\tlet elementsToSplit = [...selfToSplit, ...this.getSplitChildren(splitElementsParent)]\n\n\t\t// For each element to split, add it to the animatedElementsList array\n\t\telementsToSplit.forEach((splitElement) => {\n\t\t\t// If splitElement is a NodeList, handle each Node individually\n\t\t\tif (splitElement instanceof NodeList) {\n\t\t\t\tsplitElement.forEach((node) => this.addSplitElement(node, animatedElementsList))\n\t\t\t} else {\n\t\t\t\tthis.addSplitElement(splitElement, animatedElementsList)\n\t\t\t}\n\t\t})\n\t}\n\n\t// Function to get split children\n\tgetSplitChildren(splitElementsParent) {\n\t\tlet splitChildren = []\n\n\t\t// For each split parent, add its children to splitChildren array\n\t\tsplitElementsParent.forEach((splitParent) => {\n\t\t\tsplitChildren = [\n\t\t\t\t...splitChildren,\n\t\t\t\t...splitParent.querySelectorAll(':scope ' + splitParent.dataset.inviewSplit),\n\t\t\t]\n\t\t})\n\n\t\treturn splitChildren\n\t}\n\n\t// Function to add a split element to the animatedElementsList array\n\taddSplitElement(splitElement, animatedElementsList) {\n\t\tif (this._SplitText) {\n\t\t\ttry {\n\t\t\t\t// Check if splitElement is a DOM element\n\t\t\t\tif (splitElement instanceof Element) {\n\t\t\t\t\t// Find the closest parent with 'data-inview-order' attribute\n\t\t\t\t\tlet order = this.findClosestParentOrderAttr(splitElement)\n\n\t\t\t\t\t// Split the text of the splitElement into lines\n\t\t\t\t\tconst splitChildren = new this._SplitText(splitElement, {\n\t\t\t\t\t\ttype: 'lines',\n\t\t\t\t\t\tlinesClass: 'lineChild',\n\t\t\t\t\t})\n\n\t\t\t\t\t// For each line, add it to the animatedElementsList array\n\t\t\t\t\tsplitChildren.lines.forEach((line) => {\n\t\t\t\t\t\tif (order) {\n\t\t\t\t\t\t\torder += 0.01\n\t\t\t\t\t\t\tline.dataset.inviewOrder = order.toFixed(2)\n\t\t\t\t\t\t\tanimatedElementsList.push({\n\t\t\t\t\t\t\t\tel: line,\n\t\t\t\t\t\t\t\torder: order,\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\tthis.animatedElementsList.push(line)\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tanimatedElementsList.push({\n\t\t\t\t\t\t\t\tel: line,\n\t\t\t\t\t\t\t\torder: false,\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\tthis.animatedElementsList.push(line)\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Set visibility to visible\n\t\t\t\t\t\tline.style.visibility = 'visible'\n\t\t\t\t\t})\n\t\t\t\t} else {\n\t\t\t\t\t// Log an error if splitElement is not a DOM element\n\t\t\t\t\tconsole.error('splitElement is not a DOM element:', splitElement)\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\t// Catch and log any errors\n\t\t\t\tconsole.error('Error splitting element:', error)\n\t\t\t}\n\t\t}\n\t}\n\n\t// Function to order animated elements based on their 'order' property\n\tsortAnimatedElements(animatedElementsList) {\n\t\tanimatedElementsList.sort((a, b) => {\n\t\t\treturn (a['order'] ?? 1) - (b['order'] ?? -1)\n\t\t})\n\n\t\t// Replace each animatedElement object with its corresponding element\n\t\tfor (let i = 0; i < animatedElementsList.length; i++) {\n\t\t\tanimatedElementsList[i] = animatedElementsList[i].el\n\t\t}\n\t}\n\n\t// Function to animate the elements\n\tanimateElements(parent, animatedElementsList, index) {\n\t\t// Initialise animation property arrays\n\t\tlet animationFromPropertiesArray = []\n\t\tlet animationToPropertiesArray = []\n\n\t\t// Create a matchMedia instance\n\t\tconst matchMedia = this._gsap.matchMedia()\n\n\t\t// Get the screen media query\n\t\tconst screen = parent.dataset.inviewScreen || this.getOption('screen')\n\n\t\t// Initialise a new gsap timeline\n\t\tmatchMedia.add(screen, () => {\n\t\t\tlet timeline = this._gsap.timeline({\n\t\t\t\tscrollTrigger: {\n\t\t\t\t\ttrigger: parent,\n\t\t\t\t\tstart: parent.dataset.inviewStart || this.getOption('start'),\n\t\t\t\t\tinvalidateOnRefresh: true,\n\t\t\t\t\tonEnter: async () => {\n\t\t\t\t\t\ttimeline.play()\n\t\t\t\t\t\ttimeline.hasPlayed = true\n\n\t\t\t\t\t\tparent.classList.add(this.getOption('viewedClass'))\n\n\t\t\t\t\t\t// Check if the parent has the 'data-inview-call' attribute and, if so, dispatch a custom event with the attribute's value as the event name\n\t\t\t\t\t\tif (parent.hasAttribute('data-inview-call')) {\n\t\t\t\t\t\t\tconst customEventName = parent.getAttribute('data-inview-call')\n\t\t\t\t\t\t\twindow.dispatchEvent(\n\t\t\t\t\t\t\t\tnew CustomEvent(customEventName, {\n\t\t\t\t\t\t\t\t\tdetail: {\n\t\t\t\t\t\t\t\t\t\ttarget: parent,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (this.eventListeners['onEnter']) {\n\t\t\t\t\t\t\tthis.emit('onEnter', parent)\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tonLeave: () => {\n\t\t\t\t\t\tif (parent.hasAttribute('data-inview-repeat')) {\n\t\t\t\t\t\t\ttimeline.restart().pause()\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (this.eventListeners['onLeave']) {\n\t\t\t\t\t\t\tthis.emit('onLeave', parent)\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tonEnterBack: async () => {\n\t\t\t\t\t\tif (parent.hasAttribute('data-inview-repeat')) {\n\t\t\t\t\t\t\ttimeline.restart()\n\t\t\t\t\t\t\ttimeline.hasPlayed = true\n\t\t\t\t\t\t} else if (!timeline.hasPlayed) {\n\t\t\t\t\t\t\ttimeline.play()\n\t\t\t\t\t\t\ttimeline.hasPlayed = true\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (this.eventListeners['onEnterBack']) {\n\t\t\t\t\t\t\tthis.emit('onEnterBack', parent)\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tonLeaveBack: () => {\n\t\t\t\t\t\tif (parent.hasAttribute('data-inview-repeat')) {\n\t\t\t\t\t\t\ttimeline.restart().pause()\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (this.eventListeners['onLeaveBack']) {\n\t\t\t\t\t\t\tthis.emit('onLeaveBack', parent)\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tmarkers: parent.hasAttribute('data-inview-debug') ? true : false,\n\t\t\t\t\ttoggleClass: {\n\t\t\t\t\t\ttargets: parent,\n\t\t\t\t\t\tclassName: this.getOption('inviewClass'),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t})\n\n\t\t\ttimeline.hasPlayed = false\n\n\t\t\t// Initialise a variable to hold the current time position on the timeline\n\t\t\tlet currentTime = 0\n\n\t\t\tanimatedElementsList.forEach((element) => {\n\t\t\t\ttry {\n\t\t\t\t\tlet animationFromProperties = this.getOption('animationFrom')\n\t\t\t\t\tlet animationToProperties = this.getOption('animationTo')\n\n\t\t\t\t\t// Check if the element has custom animation properties defined in 'data-inview-from' and 'data-inview-to'\n\t\t\t\t\tif (element.dataset.inviewFrom) {\n\t\t\t\t\t\tanimationFromProperties = JSON.parse(element.dataset.inviewFrom)\n\t\t\t\t\t} else if (parent.dataset.inviewFrom) {\n\t\t\t\t\t\tanimationFromProperties = JSON.parse(parent.dataset.inviewFrom)\n\t\t\t\t\t}\n\n\t\t\t\t\tif (element.dataset.inviewTo) {\n\t\t\t\t\t\tanimationToProperties = JSON.parse(element.dataset.inviewTo)\n\t\t\t\t\t} else if (parent.dataset.inviewTo) {\n\t\t\t\t\t\tanimationToProperties = JSON.parse(parent.dataset.inviewTo)\n\t\t\t\t\t}\n\n\t\t\t\t\t// Push the properties for this element to the arrays\n\t\t\t\t\tanimationFromPropertiesArray.push(animationFromProperties)\n\t\t\t\t\tanimationToPropertiesArray.push(animationToProperties)\n\n\t\t\t\t\t// Set initial animation properties for the animated elements\n\t\t\t\t\tthis._gsap.set(element, animationFromProperties)\n\n\t\t\t\t\t// Get the stagger time\n\t\t\t\t\tlet staggerTime = parent.dataset.inviewStagger || this.getOption('stagger')\n\n\t\t\t\t\t// Add the animation to the timeline\n\t\t\t\t\ttimeline.to(\n\t\t\t\t\t\telement,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t...animationToProperties,\n\t\t\t\t\t\t\tduration: parent.dataset.inviewDuration || this.getOption('duration'),\n\t\t\t\t\t\t\tdelay: parent.dataset.inviewDelay || this.getOption('delay'),\n\t\t\t\t\t\t\tease: parent.dataset.inviewEase || this.getOption('ease'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tcurrentTime\n\t\t\t\t\t)\n\n\t\t\t\t\t// Increase the current time position by the stagger time for the next animation\n\t\t\t\t\tcurrentTime += parseFloat(staggerTime)\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconsole.error(`An error occurred while animating the element: ${e}`)\n\t\t\t\t}\n\t\t\t})\n\n\t\t\t// Pause the timeline initially, the onEnter/onEnterBack events will play/restart it\n\t\t\ttimeline.pause()\n\t\t})\n\n\t\t// Debug mode\n\t\tif (parent.hasAttribute('data-inview-debug')) {\n\t\t\tthis.debugMode(\n\t\t\t\tparent,\n\t\t\t\tanimatedElementsList,\n\t\t\t\tanimationFromPropertiesArray,\n\t\t\t\tanimationToPropertiesArray,\n\t\t\t\tindex\n\t\t\t)\n\t\t}\n\t}\n\n\t// Function for debug mode logging\n\tdebugMode(parent, animatedElementsList, animationFromProperties, animationToProperties, index) {\n\t\tconsole.group(`InviewDetection() debug instance (#${index + 1})`)\n\t\tconsole.log({\n\t\t\tparent: parent,\n\t\t\telements: animatedElementsList,\n\t\t\tscreen: this.getOption('screen'),\n\t\t\tanimationFrom: animationFromProperties,\n\t\t\tanimationTo: animationToProperties,\n\t\t\tduration: this.getOption('duration'),\n\t\t\tdelay: this.getOption('delay'),\n\t\t\tstart: this.getOption('start'),\n\t\t\tease: this.getOption('ease'),\n\t\t\tstagger: this.getOption('stagger'),\n\t\t})\n\t\tconsole.groupEnd()\n\t}\n\n\t// Function to refresh ScrollTrigger instances\n\trefresh() {\n\t\tthis._ScrollTrigger.refresh()\n\n\t\tif (this.eventListeners['refresh']) {\n\t\t\tthis.emit('refresh', parent)\n\t\t}\n\t}\n\n\t// Function to stop the animations and ScrollTrigger instances\n\tstop() {\n\t\t// Kill ScrollTrigger instances created in this script\n\t\tthis.triggers.forEach((st) => st.kill())\n\n\t\t// Kill all animations\n\t\tconst allElements = this._gsap.utils.toArray(this.getOption('elements')).concat(this.animatedElementsList)\n\n\t\tallElements.forEach((element) => {\n\t\t\tthis._gsap.killTweensOf(element)\n\t\t})\n\n\t\tif (this.eventListeners['stop']) {\n\t\t\tthis.emit('stop', parent)\n\t\t}\n\t}\n\n\t// Function to restart the animations and reinitialise everything\n\trestart() {\n\t\t// Kill all GSAP animations of the elements\n\t\tthis._gsap.utils.toArray(this.getOption('elements')).forEach((element) => {\n\t\t\tthis._gsap.killTweensOf(element)\n\t\t})\n\n\t\t// Reinitialise everything\n\t\tthis.init()\n\n\t\tif (this.eventListeners['restart']) {\n\t\t\tthis.emit('restart', parent)\n\t\t}\n\t}\n}\n"],"names":["InviewDetection","options","gsap","ScrollTrigger","SplitText","this","_gsap","_ScrollTrigger","_SplitText","defaultOptions","elements","duration","delay","start","ease","stagger","animationFrom","opacity","y","animationTo","screen","autoStart","inviewClass","viewedClass","_extends","triggers","animatedElementsList","eventListeners","getOption","init","_proto","prototype","register","optionName","_this","console","log","utils","toArray","forEach","parent","index","hasAttribute","addScopedElements","addChildElements","addSplitElements","push","el","order","dataset","inviewOrder","sortAnimatedElements","animateElements","error","on","eventName","listener","emit","element","_this2","inviewScope","querySelectorAll","parseFloat","_this3","findClosestParentOrderAttr","parentElement","ancestorsIndexed","getAttribute","value","isNaN","_this4","splitElements","splitElementsParent","Array","from","filter","inviewSplit","selfToSplit","concat","getSplitChildren","splitElement","NodeList","node","addSplitElement","splitChildren","splitParent","_this5","Element","type","linesClass","lines","line","toFixed","style","visibility","sort","a","b","_a$order","_b$order","i","length","_this6","animationFromPropertiesArray","animationToPropertiesArray","matchMedia","inviewScreen","add","timeline","scrollTrigger","trigger","inviewStart","invalidateOnRefresh","onEnter","play","hasPlayed","classList","customEventName","window","dispatchEvent","CustomEvent","detail","target","Promise","resolve","e","reject","onLeave","restart","pause","onEnterBack","onLeaveBack","markers","toggleClass","targets","className","currentTime","animationFromProperties","animationToProperties","inviewFrom","JSON","parse","inviewTo","set","staggerTime","inviewStagger","to","inviewDuration","inviewDelay","inviewEase","debugMode","group","groupEnd","refresh","stop","_this7","st","kill","killTweensOf","_this8"],"mappings":"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"}